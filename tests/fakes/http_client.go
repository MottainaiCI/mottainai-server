// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"io"
	"sync"

	"github.com/MottainaiCI/mottainai-server/pkg/client"
	"github.com/MottainaiCI/mottainai-server/pkg/event"
	"github.com/MottainaiCI/mottainai-server/routes/schema"
	"github.com/mudler/anagent"
)

type FakeHttpClient struct {
	AbortTaskStub        func()
	abortTaskMutex       sync.RWMutex
	abortTaskArgsForCall []struct {
	}
	AllTasksStub        func() ([]byte, error)
	allTasksMutex       sync.RWMutex
	allTasksArgsForCall []struct {
	}
	allTasksReturns struct {
		result1 []byte
		result2 error
	}
	allTasksReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	AppendTaskOutputStub        func(string) (event.APIResponse, error)
	appendTaskOutputMutex       sync.RWMutex
	appendTaskOutputArgsForCall []struct {
		arg1 string
	}
	appendTaskOutputReturns struct {
		result1 event.APIResponse
		result2 error
	}
	appendTaskOutputReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	CloneTaskStub        func(string) (event.APIResponse, error)
	cloneTaskMutex       sync.RWMutex
	cloneTaskArgsForCall []struct {
		arg1 string
	}
	cloneTaskReturns struct {
		result1 event.APIResponse
		result2 error
	}
	cloneTaskReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	CreateNodeStub        func() (event.APIResponse, error)
	createNodeMutex       sync.RWMutex
	createNodeArgsForCall []struct {
	}
	createNodeReturns struct {
		result1 event.APIResponse
		result2 error
	}
	createNodeReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	CreateTaskStub        func(map[string]interface{}) (event.APIResponse, error)
	createTaskMutex       sync.RWMutex
	createTaskArgsForCall []struct {
		arg1 map[string]interface{}
	}
	createTaskReturns struct {
		result1 event.APIResponse
		result2 error
	}
	createTaskReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	DocStub        func(string)
	docMutex       sync.RWMutex
	docArgsForCall []struct {
		arg1 string
	}
	DownloadStub        func(string, string) (bool, error)
	downloadMutex       sync.RWMutex
	downloadArgsForCall []struct {
		arg1 string
		arg2 string
	}
	downloadReturns struct {
		result1 bool
		result2 error
	}
	downloadReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	DownloadArtefactsFromNamespaceStub        func(string, string, []string) error
	downloadArtefactsFromNamespaceMutex       sync.RWMutex
	downloadArtefactsFromNamespaceArgsForCall []struct {
		arg1    string
		arg2    string
		filters []string
	}
	downloadArtefactsFromNamespaceReturns struct {
		result1 error
	}
	downloadArtefactsFromNamespaceReturnsOnCall map[int]struct {
		result1 error
	}
	DownloadArtefactsFromStorageStub        func(string, string) error
	downloadArtefactsFromStorageMutex       sync.RWMutex
	downloadArtefactsFromStorageArgsForCall []struct {
		arg1 string
		arg2 string
	}
	downloadArtefactsFromStorageReturns struct {
		result1 error
	}
	downloadArtefactsFromStorageReturnsOnCall map[int]struct {
		result1 error
	}
	DownloadArtefactsFromTaskStub        func(string, string, []string) error
	downloadArtefactsFromTaskMutex       sync.RWMutex
	downloadArtefactsFromTaskArgsForCall []struct {
		arg1    string
		arg2    string
		filters []string
	}
	downloadArtefactsFromTaskReturns struct {
		result1 error
	}
	downloadArtefactsFromTaskReturnsOnCall map[int]struct {
		result1 error
	}
	DownloadArtefactsGenericStub        func(string, string, string, []string) error
	downloadArtefactsGenericMutex       sync.RWMutex
	downloadArtefactsGenericArgsForCall []struct {
		arg1    string
		arg2    string
		arg3    string
		filters []string
	}
	downloadArtefactsGenericReturns struct {
		result1 error
	}
	downloadArtefactsGenericReturnsOnCall map[int]struct {
		result1 error
	}
	ErrorTaskStub        func()
	errorTaskMutex       sync.RWMutex
	errorTaskArgsForCall []struct {
	}
	FailTaskStub        func(string)
	failTaskMutex       sync.RWMutex
	failTaskArgsForCall []struct {
		arg1 string
	}
	FinishTaskStub        func()
	finishTaskMutex       sync.RWMutex
	finishTaskArgsForCall []struct {
	}
	GetBaseURLStub        func() string
	getBaseURLMutex       sync.RWMutex
	getBaseURLArgsForCall []struct {
	}
	getBaseURLReturns struct {
		result1 string
	}
	getBaseURLReturnsOnCall map[int]struct {
		result1 string
	}
	GetTaskStub        func() ([]byte, error)
	getTaskMutex       sync.RWMutex
	getTaskArgsForCall []struct {
	}
	getTaskReturns struct {
		result1 []byte
		result2 error
	}
	getTaskReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	HandleStub        func(schema.Request) error
	handleMutex       sync.RWMutex
	handleArgsForCall []struct {
		arg1 schema.Request
	}
	handleReturns struct {
		result1 error
	}
	handleReturnsOnCall map[int]struct {
		result1 error
	}
	HandleAPIResponseStub        func(schema.Request) (event.APIResponse, error)
	handleAPIResponseMutex       sync.RWMutex
	handleAPIResponseArgsForCall []struct {
		arg1 schema.Request
	}
	handleAPIResponseReturns struct {
		result1 event.APIResponse
		result2 error
	}
	handleAPIResponseReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	HandleRawStub        func(schema.Request, func(io.ReadCloser) error) error
	handleRawMutex       sync.RWMutex
	handleRawArgsForCall []struct {
		arg1 schema.Request
		arg2 func(io.ReadCloser) error
	}
	handleRawReturns struct {
		result1 error
	}
	handleRawReturnsOnCall map[int]struct {
		result1 error
	}
	HandleUploadLargeFileStub        func(schema.Request, string, string, int) error
	handleUploadLargeFileMutex       sync.RWMutex
	handleUploadLargeFileArgsForCall []struct {
		arg1 schema.Request
		arg2 string
		arg3 string
		arg4 int
	}
	handleUploadLargeFileReturns struct {
		result1 error
	}
	handleUploadLargeFileReturnsOnCall map[int]struct {
		result1 error
	}
	NamespaceAppendStub        func(string, string) (event.APIResponse, error)
	namespaceAppendMutex       sync.RWMutex
	namespaceAppendArgsForCall []struct {
		arg1 string
		arg2 string
	}
	namespaceAppendReturns struct {
		result1 event.APIResponse
		result2 error
	}
	namespaceAppendReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	NamespaceCloneStub        func(string, string) (event.APIResponse, error)
	namespaceCloneMutex       sync.RWMutex
	namespaceCloneArgsForCall []struct {
		arg1 string
		arg2 string
	}
	namespaceCloneReturns struct {
		result1 event.APIResponse
		result2 error
	}
	namespaceCloneReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	NamespaceCreateStub        func(string) (event.APIResponse, error)
	namespaceCreateMutex       sync.RWMutex
	namespaceCreateArgsForCall []struct {
		arg1 string
	}
	namespaceCreateReturns struct {
		result1 event.APIResponse
		result2 error
	}
	namespaceCreateReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	NamespaceDeleteStub        func(string) (event.APIResponse, error)
	namespaceDeleteMutex       sync.RWMutex
	namespaceDeleteArgsForCall []struct {
		arg1 string
	}
	namespaceDeleteReturns struct {
		result1 event.APIResponse
		result2 error
	}
	namespaceDeleteReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	NamespaceFileListStub        func(string) ([]string, error)
	namespaceFileListMutex       sync.RWMutex
	namespaceFileListArgsForCall []struct {
		arg1 string
	}
	namespaceFileListReturns struct {
		result1 []string
		result2 error
	}
	namespaceFileListReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	NamespaceRemovePathStub        func(string, string) (event.APIResponse, error)
	namespaceRemovePathMutex       sync.RWMutex
	namespaceRemovePathArgsForCall []struct {
		arg1 string
		arg2 string
	}
	namespaceRemovePathReturns struct {
		result1 event.APIResponse
		result2 error
	}
	namespaceRemovePathReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	NamespaceTagStub        func(string, string) (event.APIResponse, error)
	namespaceTagMutex       sync.RWMutex
	namespaceTagArgsForCall []struct {
		arg1 string
		arg2 string
	}
	namespaceTagReturns struct {
		result1 event.APIResponse
		result2 error
	}
	namespaceTagReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	NodesTaskStub        func(string, interface{}) error
	nodesTaskMutex       sync.RWMutex
	nodesTaskArgsForCall []struct {
		arg1 string
		arg2 interface{}
	}
	nodesTaskReturns struct {
		result1 error
	}
	nodesTaskReturnsOnCall map[int]struct {
		result1 error
	}
	PipelineCreateStub        func(map[string]interface{}) (event.APIResponse, error)
	pipelineCreateMutex       sync.RWMutex
	pipelineCreateArgsForCall []struct {
		arg1 map[string]interface{}
	}
	pipelineCreateReturns struct {
		result1 event.APIResponse
		result2 error
	}
	pipelineCreateReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	PipelineDeleteStub        func(string) (event.APIResponse, error)
	pipelineDeleteMutex       sync.RWMutex
	pipelineDeleteArgsForCall []struct {
		arg1 string
	}
	pipelineDeleteReturns struct {
		result1 event.APIResponse
		result2 error
	}
	pipelineDeleteReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	PlanCreateStub        func(map[string]interface{}) (event.APIResponse, error)
	planCreateMutex       sync.RWMutex
	planCreateArgsForCall []struct {
		arg1 map[string]interface{}
	}
	planCreateReturns struct {
		result1 event.APIResponse
		result2 error
	}
	planCreateReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	PlanDeleteStub        func(string) (event.APIResponse, error)
	planDeleteMutex       sync.RWMutex
	planDeleteArgsForCall []struct {
		arg1 string
	}
	planDeleteReturns struct {
		result1 event.APIResponse
		result2 error
	}
	planDeleteReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	RegisterNodeStub        func(string, string) (event.APIResponse, error)
	registerNodeMutex       sync.RWMutex
	registerNodeArgsForCall []struct {
		arg1 string
		arg2 string
	}
	registerNodeReturns struct {
		result1 event.APIResponse
		result2 error
	}
	registerNodeReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	RemoveNodeStub        func(string) (event.APIResponse, error)
	removeNodeMutex       sync.RWMutex
	removeNodeArgsForCall []struct {
		arg1 string
	}
	removeNodeReturns struct {
		result1 event.APIResponse
		result2 error
	}
	removeNodeReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	RunTaskStub        func()
	runTaskMutex       sync.RWMutex
	runTaskArgsForCall []struct {
	}
	SecretCreateStub        func(string) (event.APIResponse, error)
	secretCreateMutex       sync.RWMutex
	secretCreateArgsForCall []struct {
		arg1 string
	}
	secretCreateReturns struct {
		result1 event.APIResponse
		result2 error
	}
	secretCreateReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	SecretDeleteStub        func(string) (event.APIResponse, error)
	secretDeleteMutex       sync.RWMutex
	secretDeleteArgsForCall []struct {
		arg1 string
	}
	secretDeleteReturns struct {
		result1 event.APIResponse
		result2 error
	}
	secretDeleteReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	SecretEditStub        func(map[string]interface{}) (event.APIResponse, error)
	secretEditMutex       sync.RWMutex
	secretEditArgsForCall []struct {
		arg1 map[string]interface{}
	}
	secretEditReturns struct {
		result1 event.APIResponse
		result2 error
	}
	secretEditReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	SetActiveReportStub        func(bool)
	setActiveReportMutex       sync.RWMutex
	setActiveReportArgsForCall []struct {
		arg1 bool
	}
	SetAgentStub        func(*anagent.Anagent)
	setAgentMutex       sync.RWMutex
	setAgentArgsForCall []struct {
		arg1 *anagent.Anagent
	}
	SetBaseURLStub        func(string)
	setBaseURLMutex       sync.RWMutex
	setBaseURLArgsForCall []struct {
		arg1 string
	}
	SetTaskFieldStub        func(string, string) (event.APIResponse, error)
	setTaskFieldMutex       sync.RWMutex
	setTaskFieldArgsForCall []struct {
		arg1 string
		arg2 string
	}
	setTaskFieldReturns struct {
		result1 event.APIResponse
		result2 error
	}
	setTaskFieldReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	SetTaskOutputStub        func(string) (event.APIResponse, error)
	setTaskOutputMutex       sync.RWMutex
	setTaskOutputArgsForCall []struct {
		arg1 string
	}
	setTaskOutputReturns struct {
		result1 event.APIResponse
		result2 error
	}
	setTaskOutputReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	SetTaskResultStub        func(string) (event.APIResponse, error)
	setTaskResultMutex       sync.RWMutex
	setTaskResultArgsForCall []struct {
		arg1 string
	}
	setTaskResultReturns struct {
		result1 event.APIResponse
		result2 error
	}
	setTaskResultReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	SetTaskStatusStub        func(string) (event.APIResponse, error)
	setTaskStatusMutex       sync.RWMutex
	setTaskStatusArgsForCall []struct {
		arg1 string
	}
	setTaskStatusReturns struct {
		result1 event.APIResponse
		result2 error
	}
	setTaskStatusReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	SetTokenStub        func(string)
	setTokenMutex       sync.RWMutex
	setTokenArgsForCall []struct {
		arg1 string
	}
	SetUploadChunkSizeStub        func(int)
	setUploadChunkSizeMutex       sync.RWMutex
	setUploadChunkSizeArgsForCall []struct {
		arg1 int
	}
	SettingCreateStub        func(map[string]interface{}) (event.APIResponse, error)
	settingCreateMutex       sync.RWMutex
	settingCreateArgsForCall []struct {
		arg1 map[string]interface{}
	}
	settingCreateReturns struct {
		result1 event.APIResponse
		result2 error
	}
	settingCreateReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	SettingRemoveStub        func(string) (event.APIResponse, error)
	settingRemoveMutex       sync.RWMutex
	settingRemoveArgsForCall []struct {
		arg1 string
	}
	settingRemoveReturns struct {
		result1 event.APIResponse
		result2 error
	}
	settingRemoveReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	SettingUpdateStub        func(map[string]interface{}) (event.APIResponse, error)
	settingUpdateMutex       sync.RWMutex
	settingUpdateArgsForCall []struct {
		arg1 map[string]interface{}
	}
	settingUpdateReturns struct {
		result1 event.APIResponse
		result2 error
	}
	settingUpdateReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	SetupTaskStub        func() (event.APIResponse, error)
	setupTaskMutex       sync.RWMutex
	setupTaskArgsForCall []struct {
	}
	setupTaskReturns struct {
		result1 event.APIResponse
		result2 error
	}
	setupTaskReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	StartTaskStub        func(string) (event.APIResponse, error)
	startTaskMutex       sync.RWMutex
	startTaskArgsForCall []struct {
		arg1 string
	}
	startTaskReturns struct {
		result1 event.APIResponse
		result2 error
	}
	startTaskReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	StopTaskStub        func(string) (event.APIResponse, error)
	stopTaskMutex       sync.RWMutex
	stopTaskArgsForCall []struct {
		arg1 string
	}
	stopTaskReturns struct {
		result1 event.APIResponse
		result2 error
	}
	stopTaskReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	StorageCreateStub        func(string) (event.APIResponse, error)
	storageCreateMutex       sync.RWMutex
	storageCreateArgsForCall []struct {
		arg1 string
	}
	storageCreateReturns struct {
		result1 event.APIResponse
		result2 error
	}
	storageCreateReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	StorageDeleteStub        func(string) (event.APIResponse, error)
	storageDeleteMutex       sync.RWMutex
	storageDeleteArgsForCall []struct {
		arg1 string
	}
	storageDeleteReturns struct {
		result1 event.APIResponse
		result2 error
	}
	storageDeleteReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	StorageFileListStub        func(string) ([]string, error)
	storageFileListMutex       sync.RWMutex
	storageFileListArgsForCall []struct {
		arg1 string
	}
	storageFileListReturns struct {
		result1 []string
		result2 error
	}
	storageFileListReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	StorageRemovePathStub        func(string, string) (event.APIResponse, error)
	storageRemovePathMutex       sync.RWMutex
	storageRemovePathArgsForCall []struct {
		arg1 string
		arg2 string
	}
	storageRemovePathReturns struct {
		result1 event.APIResponse
		result2 error
	}
	storageRemovePathReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	StreamOutputStub        func(io.Reader)
	streamOutputMutex       sync.RWMutex
	streamOutputArgsForCall []struct {
		arg1 io.Reader
	}
	SuccessTaskStub        func()
	successTaskMutex       sync.RWMutex
	successTaskArgsForCall []struct {
	}
	TaskDeleteStub        func(string) (event.APIResponse, error)
	taskDeleteMutex       sync.RWMutex
	taskDeleteArgsForCall []struct {
		arg1 string
	}
	taskDeleteReturns struct {
		result1 event.APIResponse
		result2 error
	}
	taskDeleteReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	TaskFileListStub        func(string) ([]string, error)
	taskFileListMutex       sync.RWMutex
	taskFileListArgsForCall []struct {
		arg1 string
	}
	taskFileListReturns struct {
		result1 []string
		result2 error
	}
	taskFileListReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	TaskLogStub        func(string) ([]byte, error)
	taskLogMutex       sync.RWMutex
	taskLogArgsForCall []struct {
		arg1 string
	}
	taskLogReturns struct {
		result1 []byte
		result2 error
	}
	taskLogReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	TaskLogArtefactStub        func(string) ([]byte, error)
	taskLogArtefactMutex       sync.RWMutex
	taskLogArtefactArgsForCall []struct {
		arg1 string
	}
	taskLogArtefactReturns struct {
		result1 []byte
		result2 error
	}
	taskLogArtefactReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	TaskStreamStub        func(string, string) ([]byte, error)
	taskStreamMutex       sync.RWMutex
	taskStreamArgsForCall []struct {
		arg1 string
		arg2 string
	}
	taskStreamReturns struct {
		result1 []byte
		result2 error
	}
	taskStreamReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	TokenCreateStub        func() (event.APIResponse, error)
	tokenCreateMutex       sync.RWMutex
	tokenCreateArgsForCall []struct {
	}
	tokenCreateReturns struct {
		result1 event.APIResponse
		result2 error
	}
	tokenCreateReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	TokenDeleteStub        func(string) (event.APIResponse, error)
	tokenDeleteMutex       sync.RWMutex
	tokenDeleteArgsForCall []struct {
		arg1 string
	}
	tokenDeleteReturns struct {
		result1 event.APIResponse
		result2 error
	}
	tokenDeleteReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	UploadArtefactStub        func(string, string) error
	uploadArtefactMutex       sync.RWMutex
	uploadArtefactArgsForCall []struct {
		arg1 string
		arg2 string
	}
	uploadArtefactReturns struct {
		result1 error
	}
	uploadArtefactReturnsOnCall map[int]struct {
		result1 error
	}
	UploadArtefactRetryStub        func(string, string, int) error
	uploadArtefactRetryMutex       sync.RWMutex
	uploadArtefactRetryArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 int
	}
	uploadArtefactRetryReturns struct {
		result1 error
	}
	uploadArtefactRetryReturnsOnCall map[int]struct {
		result1 error
	}
	UploadFileStub        func(string, string) error
	uploadFileMutex       sync.RWMutex
	uploadFileArgsForCall []struct {
		arg1 string
		arg2 string
	}
	uploadFileReturns struct {
		result1 error
	}
	uploadFileReturnsOnCall map[int]struct {
		result1 error
	}
	UploadNamespaceFileStub        func(string, string, string) error
	uploadNamespaceFileMutex       sync.RWMutex
	uploadNamespaceFileArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	uploadNamespaceFileReturns struct {
		result1 error
	}
	uploadNamespaceFileReturnsOnCall map[int]struct {
		result1 error
	}
	UploadStorageFileStub        func(string, string, string) error
	uploadStorageFileMutex       sync.RWMutex
	uploadStorageFileArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	uploadStorageFileReturns struct {
		result1 error
	}
	uploadStorageFileReturnsOnCall map[int]struct {
		result1 error
	}
	UserCreateStub        func(map[string]interface{}) (event.APIResponse, error)
	userCreateMutex       sync.RWMutex
	userCreateArgsForCall []struct {
		arg1 map[string]interface{}
	}
	userCreateReturns struct {
		result1 event.APIResponse
		result2 error
	}
	userCreateReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	UserRemoveStub        func(string) (event.APIResponse, error)
	userRemoveMutex       sync.RWMutex
	userRemoveArgsForCall []struct {
		arg1 string
	}
	userRemoveReturns struct {
		result1 event.APIResponse
		result2 error
	}
	userRemoveReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	UserSetStub        func(string, string) (event.APIResponse, error)
	userSetMutex       sync.RWMutex
	userSetArgsForCall []struct {
		arg1 string
		arg2 string
	}
	userSetReturns struct {
		result1 event.APIResponse
		result2 error
	}
	userSetReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	UserUnsetStub        func(string, string) (event.APIResponse, error)
	userUnsetMutex       sync.RWMutex
	userUnsetArgsForCall []struct {
		arg1 string
		arg2 string
	}
	userUnsetReturns struct {
		result1 event.APIResponse
		result2 error
	}
	userUnsetReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	UserUpdateStub        func(string, map[string]interface{}) (event.APIResponse, error)
	userUpdateMutex       sync.RWMutex
	userUpdateArgsForCall []struct {
		arg1 string
		arg2 map[string]interface{}
	}
	userUpdateReturns struct {
		result1 event.APIResponse
		result2 error
	}
	userUpdateReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	WebHookCreateStub        func(string) (event.APIResponse, error)
	webHookCreateMutex       sync.RWMutex
	webHookCreateArgsForCall []struct {
		arg1 string
	}
	webHookCreateReturns struct {
		result1 event.APIResponse
		result2 error
	}
	webHookCreateReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	WebHookDeleteStub        func(string) (event.APIResponse, error)
	webHookDeleteMutex       sync.RWMutex
	webHookDeleteArgsForCall []struct {
		arg1 string
	}
	webHookDeleteReturns struct {
		result1 event.APIResponse
		result2 error
	}
	webHookDeleteReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	WebHookDeletePipelineStub        func(string) (event.APIResponse, error)
	webHookDeletePipelineMutex       sync.RWMutex
	webHookDeletePipelineArgsForCall []struct {
		arg1 string
	}
	webHookDeletePipelineReturns struct {
		result1 event.APIResponse
		result2 error
	}
	webHookDeletePipelineReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	WebHookDeleteTaskStub        func(string) (event.APIResponse, error)
	webHookDeleteTaskMutex       sync.RWMutex
	webHookDeleteTaskArgsForCall []struct {
		arg1 string
	}
	webHookDeleteTaskReturns struct {
		result1 event.APIResponse
		result2 error
	}
	webHookDeleteTaskReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	WebHookEditStub        func(map[string]interface{}) (event.APIResponse, error)
	webHookEditMutex       sync.RWMutex
	webHookEditArgsForCall []struct {
		arg1 map[string]interface{}
	}
	webHookEditReturns struct {
		result1 event.APIResponse
		result2 error
	}
	webHookEditReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	WebHookPipelineUpdateStub        func(string, map[string]interface{}) (event.APIResponse, error)
	webHookPipelineUpdateMutex       sync.RWMutex
	webHookPipelineUpdateArgsForCall []struct {
		arg1 string
		arg2 map[string]interface{}
	}
	webHookPipelineUpdateReturns struct {
		result1 event.APIResponse
		result2 error
	}
	webHookPipelineUpdateReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	WebHookTaskUpdateStub        func(string, map[string]interface{}) (event.APIResponse, error)
	webHookTaskUpdateMutex       sync.RWMutex
	webHookTaskUpdateArgsForCall []struct {
		arg1 string
		arg2 map[string]interface{}
	}
	webHookTaskUpdateReturns struct {
		result1 event.APIResponse
		result2 error
	}
	webHookTaskUpdateReturnsOnCall map[int]struct {
		result1 event.APIResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHttpClient) AbortTask() {
	fake.abortTaskMutex.Lock()
	fake.abortTaskArgsForCall = append(fake.abortTaskArgsForCall, struct {
	}{})
	fake.recordInvocation("AbortTask", []interface{}{})
	fake.abortTaskMutex.Unlock()
	if fake.AbortTaskStub != nil {
		fake.AbortTaskStub()
	}
}

func (fake *FakeHttpClient) AbortTaskCallCount() int {
	fake.abortTaskMutex.RLock()
	defer fake.abortTaskMutex.RUnlock()
	return len(fake.abortTaskArgsForCall)
}

func (fake *FakeHttpClient) AbortTaskCalls(stub func()) {
	fake.abortTaskMutex.Lock()
	defer fake.abortTaskMutex.Unlock()
	fake.AbortTaskStub = stub
}

func (fake *FakeHttpClient) AllTasks() ([]byte, error) {
	fake.allTasksMutex.Lock()
	ret, specificReturn := fake.allTasksReturnsOnCall[len(fake.allTasksArgsForCall)]
	fake.allTasksArgsForCall = append(fake.allTasksArgsForCall, struct {
	}{})
	fake.recordInvocation("AllTasks", []interface{}{})
	fake.allTasksMutex.Unlock()
	if fake.AllTasksStub != nil {
		return fake.AllTasksStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.allTasksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) AllTasksCallCount() int {
	fake.allTasksMutex.RLock()
	defer fake.allTasksMutex.RUnlock()
	return len(fake.allTasksArgsForCall)
}

func (fake *FakeHttpClient) AllTasksCalls(stub func() ([]byte, error)) {
	fake.allTasksMutex.Lock()
	defer fake.allTasksMutex.Unlock()
	fake.AllTasksStub = stub
}

func (fake *FakeHttpClient) AllTasksReturns(result1 []byte, result2 error) {
	fake.allTasksMutex.Lock()
	defer fake.allTasksMutex.Unlock()
	fake.AllTasksStub = nil
	fake.allTasksReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) AllTasksReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.allTasksMutex.Lock()
	defer fake.allTasksMutex.Unlock()
	fake.AllTasksStub = nil
	if fake.allTasksReturnsOnCall == nil {
		fake.allTasksReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.allTasksReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) AppendTaskOutput(arg1 string) (event.APIResponse, error) {
	fake.appendTaskOutputMutex.Lock()
	ret, specificReturn := fake.appendTaskOutputReturnsOnCall[len(fake.appendTaskOutputArgsForCall)]
	fake.appendTaskOutputArgsForCall = append(fake.appendTaskOutputArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("AppendTaskOutput", []interface{}{arg1})
	fake.appendTaskOutputMutex.Unlock()
	if fake.AppendTaskOutputStub != nil {
		return fake.AppendTaskOutputStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.appendTaskOutputReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) AppendTaskOutputCallCount() int {
	fake.appendTaskOutputMutex.RLock()
	defer fake.appendTaskOutputMutex.RUnlock()
	return len(fake.appendTaskOutputArgsForCall)
}

func (fake *FakeHttpClient) AppendTaskOutputCalls(stub func(string) (event.APIResponse, error)) {
	fake.appendTaskOutputMutex.Lock()
	defer fake.appendTaskOutputMutex.Unlock()
	fake.AppendTaskOutputStub = stub
}

func (fake *FakeHttpClient) AppendTaskOutputArgsForCall(i int) string {
	fake.appendTaskOutputMutex.RLock()
	defer fake.appendTaskOutputMutex.RUnlock()
	argsForCall := fake.appendTaskOutputArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) AppendTaskOutputReturns(result1 event.APIResponse, result2 error) {
	fake.appendTaskOutputMutex.Lock()
	defer fake.appendTaskOutputMutex.Unlock()
	fake.AppendTaskOutputStub = nil
	fake.appendTaskOutputReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) AppendTaskOutputReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.appendTaskOutputMutex.Lock()
	defer fake.appendTaskOutputMutex.Unlock()
	fake.AppendTaskOutputStub = nil
	if fake.appendTaskOutputReturnsOnCall == nil {
		fake.appendTaskOutputReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.appendTaskOutputReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) CloneTask(arg1 string) (event.APIResponse, error) {
	fake.cloneTaskMutex.Lock()
	ret, specificReturn := fake.cloneTaskReturnsOnCall[len(fake.cloneTaskArgsForCall)]
	fake.cloneTaskArgsForCall = append(fake.cloneTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("CloneTask", []interface{}{arg1})
	fake.cloneTaskMutex.Unlock()
	if fake.CloneTaskStub != nil {
		return fake.CloneTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cloneTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) CloneTaskCallCount() int {
	fake.cloneTaskMutex.RLock()
	defer fake.cloneTaskMutex.RUnlock()
	return len(fake.cloneTaskArgsForCall)
}

func (fake *FakeHttpClient) CloneTaskCalls(stub func(string) (event.APIResponse, error)) {
	fake.cloneTaskMutex.Lock()
	defer fake.cloneTaskMutex.Unlock()
	fake.CloneTaskStub = stub
}

func (fake *FakeHttpClient) CloneTaskArgsForCall(i int) string {
	fake.cloneTaskMutex.RLock()
	defer fake.cloneTaskMutex.RUnlock()
	argsForCall := fake.cloneTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) CloneTaskReturns(result1 event.APIResponse, result2 error) {
	fake.cloneTaskMutex.Lock()
	defer fake.cloneTaskMutex.Unlock()
	fake.CloneTaskStub = nil
	fake.cloneTaskReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) CloneTaskReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.cloneTaskMutex.Lock()
	defer fake.cloneTaskMutex.Unlock()
	fake.CloneTaskStub = nil
	if fake.cloneTaskReturnsOnCall == nil {
		fake.cloneTaskReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.cloneTaskReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) CreateNode() (event.APIResponse, error) {
	fake.createNodeMutex.Lock()
	ret, specificReturn := fake.createNodeReturnsOnCall[len(fake.createNodeArgsForCall)]
	fake.createNodeArgsForCall = append(fake.createNodeArgsForCall, struct {
	}{})
	fake.recordInvocation("CreateNode", []interface{}{})
	fake.createNodeMutex.Unlock()
	if fake.CreateNodeStub != nil {
		return fake.CreateNodeStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNodeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) CreateNodeCallCount() int {
	fake.createNodeMutex.RLock()
	defer fake.createNodeMutex.RUnlock()
	return len(fake.createNodeArgsForCall)
}

func (fake *FakeHttpClient) CreateNodeCalls(stub func() (event.APIResponse, error)) {
	fake.createNodeMutex.Lock()
	defer fake.createNodeMutex.Unlock()
	fake.CreateNodeStub = stub
}

func (fake *FakeHttpClient) CreateNodeReturns(result1 event.APIResponse, result2 error) {
	fake.createNodeMutex.Lock()
	defer fake.createNodeMutex.Unlock()
	fake.CreateNodeStub = nil
	fake.createNodeReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) CreateNodeReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.createNodeMutex.Lock()
	defer fake.createNodeMutex.Unlock()
	fake.CreateNodeStub = nil
	if fake.createNodeReturnsOnCall == nil {
		fake.createNodeReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.createNodeReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) CreateTask(arg1 map[string]interface{}) (event.APIResponse, error) {
	fake.createTaskMutex.Lock()
	ret, specificReturn := fake.createTaskReturnsOnCall[len(fake.createTaskArgsForCall)]
	fake.createTaskArgsForCall = append(fake.createTaskArgsForCall, struct {
		arg1 map[string]interface{}
	}{arg1})
	fake.recordInvocation("CreateTask", []interface{}{arg1})
	fake.createTaskMutex.Unlock()
	if fake.CreateTaskStub != nil {
		return fake.CreateTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) CreateTaskCallCount() int {
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	return len(fake.createTaskArgsForCall)
}

func (fake *FakeHttpClient) CreateTaskCalls(stub func(map[string]interface{}) (event.APIResponse, error)) {
	fake.createTaskMutex.Lock()
	defer fake.createTaskMutex.Unlock()
	fake.CreateTaskStub = stub
}

func (fake *FakeHttpClient) CreateTaskArgsForCall(i int) map[string]interface{} {
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	argsForCall := fake.createTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) CreateTaskReturns(result1 event.APIResponse, result2 error) {
	fake.createTaskMutex.Lock()
	defer fake.createTaskMutex.Unlock()
	fake.CreateTaskStub = nil
	fake.createTaskReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) CreateTaskReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.createTaskMutex.Lock()
	defer fake.createTaskMutex.Unlock()
	fake.CreateTaskStub = nil
	if fake.createTaskReturnsOnCall == nil {
		fake.createTaskReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.createTaskReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) Doc(arg1 string) {
	fake.docMutex.Lock()
	fake.docArgsForCall = append(fake.docArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Doc", []interface{}{arg1})
	fake.docMutex.Unlock()
	if fake.DocStub != nil {
		fake.DocStub(arg1)
	}
}

func (fake *FakeHttpClient) DocCallCount() int {
	fake.docMutex.RLock()
	defer fake.docMutex.RUnlock()
	return len(fake.docArgsForCall)
}

func (fake *FakeHttpClient) DocCalls(stub func(string)) {
	fake.docMutex.Lock()
	defer fake.docMutex.Unlock()
	fake.DocStub = stub
}

func (fake *FakeHttpClient) DocArgsForCall(i int) string {
	fake.docMutex.RLock()
	defer fake.docMutex.RUnlock()
	argsForCall := fake.docArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) Download(arg1 string, arg2 string) (bool, error) {
	fake.downloadMutex.Lock()
	ret, specificReturn := fake.downloadReturnsOnCall[len(fake.downloadArgsForCall)]
	fake.downloadArgsForCall = append(fake.downloadArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Download", []interface{}{arg1, arg2})
	fake.downloadMutex.Unlock()
	if fake.DownloadStub != nil {
		return fake.DownloadStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.downloadReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) DownloadCallCount() int {
	fake.downloadMutex.RLock()
	defer fake.downloadMutex.RUnlock()
	return len(fake.downloadArgsForCall)
}

func (fake *FakeHttpClient) DownloadCalls(stub func(string, string) (bool, error)) {
	fake.downloadMutex.Lock()
	defer fake.downloadMutex.Unlock()
	fake.DownloadStub = stub
}

func (fake *FakeHttpClient) DownloadArgsForCall(i int) (string, string) {
	fake.downloadMutex.RLock()
	defer fake.downloadMutex.RUnlock()
	argsForCall := fake.downloadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) DownloadReturns(result1 bool, result2 error) {
	fake.downloadMutex.Lock()
	defer fake.downloadMutex.Unlock()
	fake.DownloadStub = nil
	fake.downloadReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) DownloadReturnsOnCall(i int, result1 bool, result2 error) {
	fake.downloadMutex.Lock()
	defer fake.downloadMutex.Unlock()
	fake.DownloadStub = nil
	if fake.downloadReturnsOnCall == nil {
		fake.downloadReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.downloadReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) DownloadArtefactsFromNamespace(arg1 string, arg2 string, filters []string) error {
	fake.downloadArtefactsFromNamespaceMutex.Lock()
	ret, specificReturn := fake.downloadArtefactsFromNamespaceReturnsOnCall[len(fake.downloadArtefactsFromNamespaceArgsForCall)]
	fake.downloadArtefactsFromNamespaceArgsForCall = append(fake.downloadArtefactsFromNamespaceArgsForCall, struct {
		arg1    string
		arg2    string
		filters []string
	}{arg1, arg2, filters})
	fake.recordInvocation("DownloadArtefactsFromNamespace", []interface{}{arg1, arg2, filters})
	fake.downloadArtefactsFromNamespaceMutex.Unlock()
	if fake.DownloadArtefactsFromNamespaceStub != nil {
		return fake.DownloadArtefactsFromNamespaceStub(arg1, arg2, filters)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.downloadArtefactsFromNamespaceReturns
	return fakeReturns.result1
}

func (fake *FakeHttpClient) DownloadArtefactsFromNamespaceCallCount() int {
	fake.downloadArtefactsFromNamespaceMutex.RLock()
	defer fake.downloadArtefactsFromNamespaceMutex.RUnlock()
	return len(fake.downloadArtefactsFromNamespaceArgsForCall)
}

func (fake *FakeHttpClient) DownloadArtefactsFromNamespaceCalls(stub func(string, string, []string) error) {
	fake.downloadArtefactsFromNamespaceMutex.Lock()
	defer fake.downloadArtefactsFromNamespaceMutex.Unlock()
	fake.DownloadArtefactsFromNamespaceStub = stub
}

func (fake *FakeHttpClient) DownloadArtefactsFromNamespaceArgsForCall(i int) (string, string, []string) {
	fake.downloadArtefactsFromNamespaceMutex.RLock()
	defer fake.downloadArtefactsFromNamespaceMutex.RUnlock()
	argsForCall := fake.downloadArtefactsFromNamespaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.filters
}

func (fake *FakeHttpClient) DownloadArtefactsFromNamespaceReturns(result1 error) {
	fake.downloadArtefactsFromNamespaceMutex.Lock()
	defer fake.downloadArtefactsFromNamespaceMutex.Unlock()
	fake.DownloadArtefactsFromNamespaceStub = nil
	fake.downloadArtefactsFromNamespaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) DownloadArtefactsFromNamespaceReturnsOnCall(i int, result1 error) {
	fake.downloadArtefactsFromNamespaceMutex.Lock()
	defer fake.downloadArtefactsFromNamespaceMutex.Unlock()
	fake.DownloadArtefactsFromNamespaceStub = nil
	if fake.downloadArtefactsFromNamespaceReturnsOnCall == nil {
		fake.downloadArtefactsFromNamespaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadArtefactsFromNamespaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) DownloadArtefactsFromStorage(arg1 string, arg2 string) error {
	fake.downloadArtefactsFromStorageMutex.Lock()
	ret, specificReturn := fake.downloadArtefactsFromStorageReturnsOnCall[len(fake.downloadArtefactsFromStorageArgsForCall)]
	fake.downloadArtefactsFromStorageArgsForCall = append(fake.downloadArtefactsFromStorageArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DownloadArtefactsFromStorage", []interface{}{arg1, arg2})
	fake.downloadArtefactsFromStorageMutex.Unlock()
	if fake.DownloadArtefactsFromStorageStub != nil {
		return fake.DownloadArtefactsFromStorageStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.downloadArtefactsFromStorageReturns
	return fakeReturns.result1
}

func (fake *FakeHttpClient) DownloadArtefactsFromStorageCallCount() int {
	fake.downloadArtefactsFromStorageMutex.RLock()
	defer fake.downloadArtefactsFromStorageMutex.RUnlock()
	return len(fake.downloadArtefactsFromStorageArgsForCall)
}

func (fake *FakeHttpClient) DownloadArtefactsFromStorageCalls(stub func(string, string) error) {
	fake.downloadArtefactsFromStorageMutex.Lock()
	defer fake.downloadArtefactsFromStorageMutex.Unlock()
	fake.DownloadArtefactsFromStorageStub = stub
}

func (fake *FakeHttpClient) DownloadArtefactsFromStorageArgsForCall(i int) (string, string) {
	fake.downloadArtefactsFromStorageMutex.RLock()
	defer fake.downloadArtefactsFromStorageMutex.RUnlock()
	argsForCall := fake.downloadArtefactsFromStorageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) DownloadArtefactsFromStorageReturns(result1 error) {
	fake.downloadArtefactsFromStorageMutex.Lock()
	defer fake.downloadArtefactsFromStorageMutex.Unlock()
	fake.DownloadArtefactsFromStorageStub = nil
	fake.downloadArtefactsFromStorageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) DownloadArtefactsFromStorageReturnsOnCall(i int, result1 error) {
	fake.downloadArtefactsFromStorageMutex.Lock()
	defer fake.downloadArtefactsFromStorageMutex.Unlock()
	fake.DownloadArtefactsFromStorageStub = nil
	if fake.downloadArtefactsFromStorageReturnsOnCall == nil {
		fake.downloadArtefactsFromStorageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadArtefactsFromStorageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) DownloadArtefactsFromTask(arg1 string, arg2 string, filters []string) error {
	fake.downloadArtefactsFromTaskMutex.Lock()
	ret, specificReturn := fake.downloadArtefactsFromTaskReturnsOnCall[len(fake.downloadArtefactsFromTaskArgsForCall)]
	fake.downloadArtefactsFromTaskArgsForCall = append(fake.downloadArtefactsFromTaskArgsForCall, struct {
		arg1    string
		arg2    string
		filters []string
	}{arg1, arg2, filters})
	fake.recordInvocation("DownloadArtefactsFromTask", []interface{}{arg1, arg2, filters})
	fake.downloadArtefactsFromTaskMutex.Unlock()
	if fake.DownloadArtefactsFromTaskStub != nil {
		return fake.DownloadArtefactsFromTaskStub(arg1, arg2, filters)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.downloadArtefactsFromTaskReturns
	return fakeReturns.result1
}

func (fake *FakeHttpClient) DownloadArtefactsFromTaskCallCount() int {
	fake.downloadArtefactsFromTaskMutex.RLock()
	defer fake.downloadArtefactsFromTaskMutex.RUnlock()
	return len(fake.downloadArtefactsFromTaskArgsForCall)
}

func (fake *FakeHttpClient) DownloadArtefactsFromTaskCalls(stub func(string, string, []string) error) {
	fake.downloadArtefactsFromTaskMutex.Lock()
	defer fake.downloadArtefactsFromTaskMutex.Unlock()
	fake.DownloadArtefactsFromTaskStub = stub
}

func (fake *FakeHttpClient) DownloadArtefactsFromTaskArgsForCall(i int) (string, string, []string) {
	fake.downloadArtefactsFromTaskMutex.RLock()
	defer fake.downloadArtefactsFromTaskMutex.RUnlock()
	argsForCall := fake.downloadArtefactsFromTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.filters
}

func (fake *FakeHttpClient) DownloadArtefactsFromTaskReturns(result1 error) {
	fake.downloadArtefactsFromTaskMutex.Lock()
	defer fake.downloadArtefactsFromTaskMutex.Unlock()
	fake.DownloadArtefactsFromTaskStub = nil
	fake.downloadArtefactsFromTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) DownloadArtefactsFromTaskReturnsOnCall(i int, result1 error) {
	fake.downloadArtefactsFromTaskMutex.Lock()
	defer fake.downloadArtefactsFromTaskMutex.Unlock()
	fake.DownloadArtefactsFromTaskStub = nil
	if fake.downloadArtefactsFromTaskReturnsOnCall == nil {
		fake.downloadArtefactsFromTaskReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadArtefactsFromTaskReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) DownloadArtefactsGeneric(arg1 string, arg2 string, arg3 string, filters []string) error {
	fake.downloadArtefactsGenericMutex.Lock()
	ret, specificReturn := fake.downloadArtefactsGenericReturnsOnCall[len(fake.downloadArtefactsGenericArgsForCall)]
	fake.downloadArtefactsGenericArgsForCall = append(fake.downloadArtefactsGenericArgsForCall, struct {
		arg1    string
		arg2    string
		arg3    string
		filters []string
	}{arg1, arg2, arg3, filters})
	fake.recordInvocation("DownloadArtefactsGeneric", []interface{}{arg1, arg2, arg3, filters})
	fake.downloadArtefactsGenericMutex.Unlock()
	if fake.DownloadArtefactsGenericStub != nil {
		return fake.DownloadArtefactsGenericStub(arg1, arg2, arg3, filters)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.downloadArtefactsGenericReturns
	return fakeReturns.result1
}

func (fake *FakeHttpClient) DownloadArtefactsGenericCallCount() int {
	fake.downloadArtefactsGenericMutex.RLock()
	defer fake.downloadArtefactsGenericMutex.RUnlock()
	return len(fake.downloadArtefactsGenericArgsForCall)
}

func (fake *FakeHttpClient) DownloadArtefactsGenericCalls(stub func(string, string, string, []string) error) {
	fake.downloadArtefactsGenericMutex.Lock()
	defer fake.downloadArtefactsGenericMutex.Unlock()
	fake.DownloadArtefactsGenericStub = stub
}

func (fake *FakeHttpClient) DownloadArtefactsGenericArgsForCall(i int) (string, string, string, []string) {
	fake.downloadArtefactsGenericMutex.RLock()
	defer fake.downloadArtefactsGenericMutex.RUnlock()
	argsForCall := fake.downloadArtefactsGenericArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.filters
}

func (fake *FakeHttpClient) DownloadArtefactsGenericReturns(result1 error) {
	fake.downloadArtefactsGenericMutex.Lock()
	defer fake.downloadArtefactsGenericMutex.Unlock()
	fake.DownloadArtefactsGenericStub = nil
	fake.downloadArtefactsGenericReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) DownloadArtefactsGenericReturnsOnCall(i int, result1 error) {
	fake.downloadArtefactsGenericMutex.Lock()
	defer fake.downloadArtefactsGenericMutex.Unlock()
	fake.DownloadArtefactsGenericStub = nil
	if fake.downloadArtefactsGenericReturnsOnCall == nil {
		fake.downloadArtefactsGenericReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadArtefactsGenericReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) ErrorTask() {
	fake.errorTaskMutex.Lock()
	fake.errorTaskArgsForCall = append(fake.errorTaskArgsForCall, struct {
	}{})
	fake.recordInvocation("ErrorTask", []interface{}{})
	fake.errorTaskMutex.Unlock()
	if fake.ErrorTaskStub != nil {
		fake.ErrorTaskStub()
	}
}

func (fake *FakeHttpClient) ErrorTaskCallCount() int {
	fake.errorTaskMutex.RLock()
	defer fake.errorTaskMutex.RUnlock()
	return len(fake.errorTaskArgsForCall)
}

func (fake *FakeHttpClient) ErrorTaskCalls(stub func()) {
	fake.errorTaskMutex.Lock()
	defer fake.errorTaskMutex.Unlock()
	fake.ErrorTaskStub = stub
}

func (fake *FakeHttpClient) FailTask(arg1 string) {
	fake.failTaskMutex.Lock()
	fake.failTaskArgsForCall = append(fake.failTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FailTask", []interface{}{arg1})
	fake.failTaskMutex.Unlock()
	if fake.FailTaskStub != nil {
		fake.FailTaskStub(arg1)
	}
}

func (fake *FakeHttpClient) FailTaskCallCount() int {
	fake.failTaskMutex.RLock()
	defer fake.failTaskMutex.RUnlock()
	return len(fake.failTaskArgsForCall)
}

func (fake *FakeHttpClient) FailTaskCalls(stub func(string)) {
	fake.failTaskMutex.Lock()
	defer fake.failTaskMutex.Unlock()
	fake.FailTaskStub = stub
}

func (fake *FakeHttpClient) FailTaskArgsForCall(i int) string {
	fake.failTaskMutex.RLock()
	defer fake.failTaskMutex.RUnlock()
	argsForCall := fake.failTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) FinishTask() {
	fake.finishTaskMutex.Lock()
	fake.finishTaskArgsForCall = append(fake.finishTaskArgsForCall, struct {
	}{})
	fake.recordInvocation("FinishTask", []interface{}{})
	fake.finishTaskMutex.Unlock()
	if fake.FinishTaskStub != nil {
		fake.FinishTaskStub()
	}
}

func (fake *FakeHttpClient) FinishTaskCallCount() int {
	fake.finishTaskMutex.RLock()
	defer fake.finishTaskMutex.RUnlock()
	return len(fake.finishTaskArgsForCall)
}

func (fake *FakeHttpClient) FinishTaskCalls(stub func()) {
	fake.finishTaskMutex.Lock()
	defer fake.finishTaskMutex.Unlock()
	fake.FinishTaskStub = stub
}

func (fake *FakeHttpClient) GetBaseURL() string {
	fake.getBaseURLMutex.Lock()
	ret, specificReturn := fake.getBaseURLReturnsOnCall[len(fake.getBaseURLArgsForCall)]
	fake.getBaseURLArgsForCall = append(fake.getBaseURLArgsForCall, struct {
	}{})
	fake.recordInvocation("GetBaseURL", []interface{}{})
	fake.getBaseURLMutex.Unlock()
	if fake.GetBaseURLStub != nil {
		return fake.GetBaseURLStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getBaseURLReturns
	return fakeReturns.result1
}

func (fake *FakeHttpClient) GetBaseURLCallCount() int {
	fake.getBaseURLMutex.RLock()
	defer fake.getBaseURLMutex.RUnlock()
	return len(fake.getBaseURLArgsForCall)
}

func (fake *FakeHttpClient) GetBaseURLCalls(stub func() string) {
	fake.getBaseURLMutex.Lock()
	defer fake.getBaseURLMutex.Unlock()
	fake.GetBaseURLStub = stub
}

func (fake *FakeHttpClient) GetBaseURLReturns(result1 string) {
	fake.getBaseURLMutex.Lock()
	defer fake.getBaseURLMutex.Unlock()
	fake.GetBaseURLStub = nil
	fake.getBaseURLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeHttpClient) GetBaseURLReturnsOnCall(i int, result1 string) {
	fake.getBaseURLMutex.Lock()
	defer fake.getBaseURLMutex.Unlock()
	fake.GetBaseURLStub = nil
	if fake.getBaseURLReturnsOnCall == nil {
		fake.getBaseURLReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getBaseURLReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeHttpClient) GetTask() ([]byte, error) {
	fake.getTaskMutex.Lock()
	ret, specificReturn := fake.getTaskReturnsOnCall[len(fake.getTaskArgsForCall)]
	fake.getTaskArgsForCall = append(fake.getTaskArgsForCall, struct {
	}{})
	fake.recordInvocation("GetTask", []interface{}{})
	fake.getTaskMutex.Unlock()
	if fake.GetTaskStub != nil {
		return fake.GetTaskStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) GetTaskCallCount() int {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	return len(fake.getTaskArgsForCall)
}

func (fake *FakeHttpClient) GetTaskCalls(stub func() ([]byte, error)) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = stub
}

func (fake *FakeHttpClient) GetTaskReturns(result1 []byte, result2 error) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = nil
	fake.getTaskReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) GetTaskReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = nil
	if fake.getTaskReturnsOnCall == nil {
		fake.getTaskReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getTaskReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) Handle(arg1 schema.Request) error {
	fake.handleMutex.Lock()
	ret, specificReturn := fake.handleReturnsOnCall[len(fake.handleArgsForCall)]
	fake.handleArgsForCall = append(fake.handleArgsForCall, struct {
		arg1 schema.Request
	}{arg1})
	fake.recordInvocation("Handle", []interface{}{arg1})
	fake.handleMutex.Unlock()
	if fake.HandleStub != nil {
		return fake.HandleStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.handleReturns
	return fakeReturns.result1
}

func (fake *FakeHttpClient) HandleCallCount() int {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	return len(fake.handleArgsForCall)
}

func (fake *FakeHttpClient) HandleCalls(stub func(schema.Request) error) {
	fake.handleMutex.Lock()
	defer fake.handleMutex.Unlock()
	fake.HandleStub = stub
}

func (fake *FakeHttpClient) HandleArgsForCall(i int) schema.Request {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	argsForCall := fake.handleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) HandleReturns(result1 error) {
	fake.handleMutex.Lock()
	defer fake.handleMutex.Unlock()
	fake.HandleStub = nil
	fake.handleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) HandleReturnsOnCall(i int, result1 error) {
	fake.handleMutex.Lock()
	defer fake.handleMutex.Unlock()
	fake.HandleStub = nil
	if fake.handleReturnsOnCall == nil {
		fake.handleReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.handleReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) HandleAPIResponse(arg1 schema.Request) (event.APIResponse, error) {
	fake.handleAPIResponseMutex.Lock()
	ret, specificReturn := fake.handleAPIResponseReturnsOnCall[len(fake.handleAPIResponseArgsForCall)]
	fake.handleAPIResponseArgsForCall = append(fake.handleAPIResponseArgsForCall, struct {
		arg1 schema.Request
	}{arg1})
	fake.recordInvocation("HandleAPIResponse", []interface{}{arg1})
	fake.handleAPIResponseMutex.Unlock()
	if fake.HandleAPIResponseStub != nil {
		return fake.HandleAPIResponseStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.handleAPIResponseReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) HandleAPIResponseCallCount() int {
	fake.handleAPIResponseMutex.RLock()
	defer fake.handleAPIResponseMutex.RUnlock()
	return len(fake.handleAPIResponseArgsForCall)
}

func (fake *FakeHttpClient) HandleAPIResponseCalls(stub func(schema.Request) (event.APIResponse, error)) {
	fake.handleAPIResponseMutex.Lock()
	defer fake.handleAPIResponseMutex.Unlock()
	fake.HandleAPIResponseStub = stub
}

func (fake *FakeHttpClient) HandleAPIResponseArgsForCall(i int) schema.Request {
	fake.handleAPIResponseMutex.RLock()
	defer fake.handleAPIResponseMutex.RUnlock()
	argsForCall := fake.handleAPIResponseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) HandleAPIResponseReturns(result1 event.APIResponse, result2 error) {
	fake.handleAPIResponseMutex.Lock()
	defer fake.handleAPIResponseMutex.Unlock()
	fake.HandleAPIResponseStub = nil
	fake.handleAPIResponseReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) HandleAPIResponseReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.handleAPIResponseMutex.Lock()
	defer fake.handleAPIResponseMutex.Unlock()
	fake.HandleAPIResponseStub = nil
	if fake.handleAPIResponseReturnsOnCall == nil {
		fake.handleAPIResponseReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.handleAPIResponseReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) HandleRaw(arg1 schema.Request, arg2 func(io.ReadCloser) error) error {
	fake.handleRawMutex.Lock()
	ret, specificReturn := fake.handleRawReturnsOnCall[len(fake.handleRawArgsForCall)]
	fake.handleRawArgsForCall = append(fake.handleRawArgsForCall, struct {
		arg1 schema.Request
		arg2 func(io.ReadCloser) error
	}{arg1, arg2})
	fake.recordInvocation("HandleRaw", []interface{}{arg1, arg2})
	fake.handleRawMutex.Unlock()
	if fake.HandleRawStub != nil {
		return fake.HandleRawStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.handleRawReturns
	return fakeReturns.result1
}

func (fake *FakeHttpClient) HandleRawCallCount() int {
	fake.handleRawMutex.RLock()
	defer fake.handleRawMutex.RUnlock()
	return len(fake.handleRawArgsForCall)
}

func (fake *FakeHttpClient) HandleRawCalls(stub func(schema.Request, func(io.ReadCloser) error) error) {
	fake.handleRawMutex.Lock()
	defer fake.handleRawMutex.Unlock()
	fake.HandleRawStub = stub
}

func (fake *FakeHttpClient) HandleRawArgsForCall(i int) (schema.Request, func(io.ReadCloser) error) {
	fake.handleRawMutex.RLock()
	defer fake.handleRawMutex.RUnlock()
	argsForCall := fake.handleRawArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) HandleRawReturns(result1 error) {
	fake.handleRawMutex.Lock()
	defer fake.handleRawMutex.Unlock()
	fake.HandleRawStub = nil
	fake.handleRawReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) HandleRawReturnsOnCall(i int, result1 error) {
	fake.handleRawMutex.Lock()
	defer fake.handleRawMutex.Unlock()
	fake.HandleRawStub = nil
	if fake.handleRawReturnsOnCall == nil {
		fake.handleRawReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.handleRawReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) HandleUploadLargeFile(arg1 schema.Request, arg2 string, arg3 string, arg4 int) error {
	fake.handleUploadLargeFileMutex.Lock()
	ret, specificReturn := fake.handleUploadLargeFileReturnsOnCall[len(fake.handleUploadLargeFileArgsForCall)]
	fake.handleUploadLargeFileArgsForCall = append(fake.handleUploadLargeFileArgsForCall, struct {
		arg1 schema.Request
		arg2 string
		arg3 string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("HandleUploadLargeFile", []interface{}{arg1, arg2, arg3, arg4})
	fake.handleUploadLargeFileMutex.Unlock()
	if fake.HandleUploadLargeFileStub != nil {
		return fake.HandleUploadLargeFileStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.handleUploadLargeFileReturns
	return fakeReturns.result1
}

func (fake *FakeHttpClient) HandleUploadLargeFileCallCount() int {
	fake.handleUploadLargeFileMutex.RLock()
	defer fake.handleUploadLargeFileMutex.RUnlock()
	return len(fake.handleUploadLargeFileArgsForCall)
}

func (fake *FakeHttpClient) HandleUploadLargeFileCalls(stub func(schema.Request, string, string, int) error) {
	fake.handleUploadLargeFileMutex.Lock()
	defer fake.handleUploadLargeFileMutex.Unlock()
	fake.HandleUploadLargeFileStub = stub
}

func (fake *FakeHttpClient) HandleUploadLargeFileArgsForCall(i int) (schema.Request, string, string, int) {
	fake.handleUploadLargeFileMutex.RLock()
	defer fake.handleUploadLargeFileMutex.RUnlock()
	argsForCall := fake.handleUploadLargeFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeHttpClient) HandleUploadLargeFileReturns(result1 error) {
	fake.handleUploadLargeFileMutex.Lock()
	defer fake.handleUploadLargeFileMutex.Unlock()
	fake.HandleUploadLargeFileStub = nil
	fake.handleUploadLargeFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) HandleUploadLargeFileReturnsOnCall(i int, result1 error) {
	fake.handleUploadLargeFileMutex.Lock()
	defer fake.handleUploadLargeFileMutex.Unlock()
	fake.HandleUploadLargeFileStub = nil
	if fake.handleUploadLargeFileReturnsOnCall == nil {
		fake.handleUploadLargeFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.handleUploadLargeFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) NamespaceAppend(arg1 string, arg2 string) (event.APIResponse, error) {
	fake.namespaceAppendMutex.Lock()
	ret, specificReturn := fake.namespaceAppendReturnsOnCall[len(fake.namespaceAppendArgsForCall)]
	fake.namespaceAppendArgsForCall = append(fake.namespaceAppendArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("NamespaceAppend", []interface{}{arg1, arg2})
	fake.namespaceAppendMutex.Unlock()
	if fake.NamespaceAppendStub != nil {
		return fake.NamespaceAppendStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.namespaceAppendReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) NamespaceAppendCallCount() int {
	fake.namespaceAppendMutex.RLock()
	defer fake.namespaceAppendMutex.RUnlock()
	return len(fake.namespaceAppendArgsForCall)
}

func (fake *FakeHttpClient) NamespaceAppendCalls(stub func(string, string) (event.APIResponse, error)) {
	fake.namespaceAppendMutex.Lock()
	defer fake.namespaceAppendMutex.Unlock()
	fake.NamespaceAppendStub = stub
}

func (fake *FakeHttpClient) NamespaceAppendArgsForCall(i int) (string, string) {
	fake.namespaceAppendMutex.RLock()
	defer fake.namespaceAppendMutex.RUnlock()
	argsForCall := fake.namespaceAppendArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) NamespaceAppendReturns(result1 event.APIResponse, result2 error) {
	fake.namespaceAppendMutex.Lock()
	defer fake.namespaceAppendMutex.Unlock()
	fake.NamespaceAppendStub = nil
	fake.namespaceAppendReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) NamespaceAppendReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.namespaceAppendMutex.Lock()
	defer fake.namespaceAppendMutex.Unlock()
	fake.NamespaceAppendStub = nil
	if fake.namespaceAppendReturnsOnCall == nil {
		fake.namespaceAppendReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.namespaceAppendReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) NamespaceClone(arg1 string, arg2 string) (event.APIResponse, error) {
	fake.namespaceCloneMutex.Lock()
	ret, specificReturn := fake.namespaceCloneReturnsOnCall[len(fake.namespaceCloneArgsForCall)]
	fake.namespaceCloneArgsForCall = append(fake.namespaceCloneArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("NamespaceClone", []interface{}{arg1, arg2})
	fake.namespaceCloneMutex.Unlock()
	if fake.NamespaceCloneStub != nil {
		return fake.NamespaceCloneStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.namespaceCloneReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) NamespaceCloneCallCount() int {
	fake.namespaceCloneMutex.RLock()
	defer fake.namespaceCloneMutex.RUnlock()
	return len(fake.namespaceCloneArgsForCall)
}

func (fake *FakeHttpClient) NamespaceCloneCalls(stub func(string, string) (event.APIResponse, error)) {
	fake.namespaceCloneMutex.Lock()
	defer fake.namespaceCloneMutex.Unlock()
	fake.NamespaceCloneStub = stub
}

func (fake *FakeHttpClient) NamespaceCloneArgsForCall(i int) (string, string) {
	fake.namespaceCloneMutex.RLock()
	defer fake.namespaceCloneMutex.RUnlock()
	argsForCall := fake.namespaceCloneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) NamespaceCloneReturns(result1 event.APIResponse, result2 error) {
	fake.namespaceCloneMutex.Lock()
	defer fake.namespaceCloneMutex.Unlock()
	fake.NamespaceCloneStub = nil
	fake.namespaceCloneReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) NamespaceCloneReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.namespaceCloneMutex.Lock()
	defer fake.namespaceCloneMutex.Unlock()
	fake.NamespaceCloneStub = nil
	if fake.namespaceCloneReturnsOnCall == nil {
		fake.namespaceCloneReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.namespaceCloneReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) NamespaceCreate(arg1 string) (event.APIResponse, error) {
	fake.namespaceCreateMutex.Lock()
	ret, specificReturn := fake.namespaceCreateReturnsOnCall[len(fake.namespaceCreateArgsForCall)]
	fake.namespaceCreateArgsForCall = append(fake.namespaceCreateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("NamespaceCreate", []interface{}{arg1})
	fake.namespaceCreateMutex.Unlock()
	if fake.NamespaceCreateStub != nil {
		return fake.NamespaceCreateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.namespaceCreateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) NamespaceCreateCallCount() int {
	fake.namespaceCreateMutex.RLock()
	defer fake.namespaceCreateMutex.RUnlock()
	return len(fake.namespaceCreateArgsForCall)
}

func (fake *FakeHttpClient) NamespaceCreateCalls(stub func(string) (event.APIResponse, error)) {
	fake.namespaceCreateMutex.Lock()
	defer fake.namespaceCreateMutex.Unlock()
	fake.NamespaceCreateStub = stub
}

func (fake *FakeHttpClient) NamespaceCreateArgsForCall(i int) string {
	fake.namespaceCreateMutex.RLock()
	defer fake.namespaceCreateMutex.RUnlock()
	argsForCall := fake.namespaceCreateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) NamespaceCreateReturns(result1 event.APIResponse, result2 error) {
	fake.namespaceCreateMutex.Lock()
	defer fake.namespaceCreateMutex.Unlock()
	fake.NamespaceCreateStub = nil
	fake.namespaceCreateReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) NamespaceCreateReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.namespaceCreateMutex.Lock()
	defer fake.namespaceCreateMutex.Unlock()
	fake.NamespaceCreateStub = nil
	if fake.namespaceCreateReturnsOnCall == nil {
		fake.namespaceCreateReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.namespaceCreateReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) NamespaceDelete(arg1 string) (event.APIResponse, error) {
	fake.namespaceDeleteMutex.Lock()
	ret, specificReturn := fake.namespaceDeleteReturnsOnCall[len(fake.namespaceDeleteArgsForCall)]
	fake.namespaceDeleteArgsForCall = append(fake.namespaceDeleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("NamespaceDelete", []interface{}{arg1})
	fake.namespaceDeleteMutex.Unlock()
	if fake.NamespaceDeleteStub != nil {
		return fake.NamespaceDeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.namespaceDeleteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) NamespaceDeleteCallCount() int {
	fake.namespaceDeleteMutex.RLock()
	defer fake.namespaceDeleteMutex.RUnlock()
	return len(fake.namespaceDeleteArgsForCall)
}

func (fake *FakeHttpClient) NamespaceDeleteCalls(stub func(string) (event.APIResponse, error)) {
	fake.namespaceDeleteMutex.Lock()
	defer fake.namespaceDeleteMutex.Unlock()
	fake.NamespaceDeleteStub = stub
}

func (fake *FakeHttpClient) NamespaceDeleteArgsForCall(i int) string {
	fake.namespaceDeleteMutex.RLock()
	defer fake.namespaceDeleteMutex.RUnlock()
	argsForCall := fake.namespaceDeleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) NamespaceDeleteReturns(result1 event.APIResponse, result2 error) {
	fake.namespaceDeleteMutex.Lock()
	defer fake.namespaceDeleteMutex.Unlock()
	fake.NamespaceDeleteStub = nil
	fake.namespaceDeleteReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) NamespaceDeleteReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.namespaceDeleteMutex.Lock()
	defer fake.namespaceDeleteMutex.Unlock()
	fake.NamespaceDeleteStub = nil
	if fake.namespaceDeleteReturnsOnCall == nil {
		fake.namespaceDeleteReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.namespaceDeleteReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) NamespaceFileList(arg1 string) ([]string, error) {
	fake.namespaceFileListMutex.Lock()
	ret, specificReturn := fake.namespaceFileListReturnsOnCall[len(fake.namespaceFileListArgsForCall)]
	fake.namespaceFileListArgsForCall = append(fake.namespaceFileListArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("NamespaceFileList", []interface{}{arg1})
	fake.namespaceFileListMutex.Unlock()
	if fake.NamespaceFileListStub != nil {
		return fake.NamespaceFileListStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.namespaceFileListReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) NamespaceFileListCallCount() int {
	fake.namespaceFileListMutex.RLock()
	defer fake.namespaceFileListMutex.RUnlock()
	return len(fake.namespaceFileListArgsForCall)
}

func (fake *FakeHttpClient) NamespaceFileListCalls(stub func(string) ([]string, error)) {
	fake.namespaceFileListMutex.Lock()
	defer fake.namespaceFileListMutex.Unlock()
	fake.NamespaceFileListStub = stub
}

func (fake *FakeHttpClient) NamespaceFileListArgsForCall(i int) string {
	fake.namespaceFileListMutex.RLock()
	defer fake.namespaceFileListMutex.RUnlock()
	argsForCall := fake.namespaceFileListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) NamespaceFileListReturns(result1 []string, result2 error) {
	fake.namespaceFileListMutex.Lock()
	defer fake.namespaceFileListMutex.Unlock()
	fake.NamespaceFileListStub = nil
	fake.namespaceFileListReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) NamespaceFileListReturnsOnCall(i int, result1 []string, result2 error) {
	fake.namespaceFileListMutex.Lock()
	defer fake.namespaceFileListMutex.Unlock()
	fake.NamespaceFileListStub = nil
	if fake.namespaceFileListReturnsOnCall == nil {
		fake.namespaceFileListReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.namespaceFileListReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) NamespaceRemovePath(arg1 string, arg2 string) (event.APIResponse, error) {
	fake.namespaceRemovePathMutex.Lock()
	ret, specificReturn := fake.namespaceRemovePathReturnsOnCall[len(fake.namespaceRemovePathArgsForCall)]
	fake.namespaceRemovePathArgsForCall = append(fake.namespaceRemovePathArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("NamespaceRemovePath", []interface{}{arg1, arg2})
	fake.namespaceRemovePathMutex.Unlock()
	if fake.NamespaceRemovePathStub != nil {
		return fake.NamespaceRemovePathStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.namespaceRemovePathReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) NamespaceRemovePathCallCount() int {
	fake.namespaceRemovePathMutex.RLock()
	defer fake.namespaceRemovePathMutex.RUnlock()
	return len(fake.namespaceRemovePathArgsForCall)
}

func (fake *FakeHttpClient) NamespaceRemovePathCalls(stub func(string, string) (event.APIResponse, error)) {
	fake.namespaceRemovePathMutex.Lock()
	defer fake.namespaceRemovePathMutex.Unlock()
	fake.NamespaceRemovePathStub = stub
}

func (fake *FakeHttpClient) NamespaceRemovePathArgsForCall(i int) (string, string) {
	fake.namespaceRemovePathMutex.RLock()
	defer fake.namespaceRemovePathMutex.RUnlock()
	argsForCall := fake.namespaceRemovePathArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) NamespaceRemovePathReturns(result1 event.APIResponse, result2 error) {
	fake.namespaceRemovePathMutex.Lock()
	defer fake.namespaceRemovePathMutex.Unlock()
	fake.NamespaceRemovePathStub = nil
	fake.namespaceRemovePathReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) NamespaceRemovePathReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.namespaceRemovePathMutex.Lock()
	defer fake.namespaceRemovePathMutex.Unlock()
	fake.NamespaceRemovePathStub = nil
	if fake.namespaceRemovePathReturnsOnCall == nil {
		fake.namespaceRemovePathReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.namespaceRemovePathReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) NamespaceTag(arg1 string, arg2 string) (event.APIResponse, error) {
	fake.namespaceTagMutex.Lock()
	ret, specificReturn := fake.namespaceTagReturnsOnCall[len(fake.namespaceTagArgsForCall)]
	fake.namespaceTagArgsForCall = append(fake.namespaceTagArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("NamespaceTag", []interface{}{arg1, arg2})
	fake.namespaceTagMutex.Unlock()
	if fake.NamespaceTagStub != nil {
		return fake.NamespaceTagStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.namespaceTagReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) NamespaceTagCallCount() int {
	fake.namespaceTagMutex.RLock()
	defer fake.namespaceTagMutex.RUnlock()
	return len(fake.namespaceTagArgsForCall)
}

func (fake *FakeHttpClient) NamespaceTagCalls(stub func(string, string) (event.APIResponse, error)) {
	fake.namespaceTagMutex.Lock()
	defer fake.namespaceTagMutex.Unlock()
	fake.NamespaceTagStub = stub
}

func (fake *FakeHttpClient) NamespaceTagArgsForCall(i int) (string, string) {
	fake.namespaceTagMutex.RLock()
	defer fake.namespaceTagMutex.RUnlock()
	argsForCall := fake.namespaceTagArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) NamespaceTagReturns(result1 event.APIResponse, result2 error) {
	fake.namespaceTagMutex.Lock()
	defer fake.namespaceTagMutex.Unlock()
	fake.NamespaceTagStub = nil
	fake.namespaceTagReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) NamespaceTagReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.namespaceTagMutex.Lock()
	defer fake.namespaceTagMutex.Unlock()
	fake.NamespaceTagStub = nil
	if fake.namespaceTagReturnsOnCall == nil {
		fake.namespaceTagReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.namespaceTagReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) NodesTask(arg1 string, arg2 interface{}) error {
	fake.nodesTaskMutex.Lock()
	ret, specificReturn := fake.nodesTaskReturnsOnCall[len(fake.nodesTaskArgsForCall)]
	fake.nodesTaskArgsForCall = append(fake.nodesTaskArgsForCall, struct {
		arg1 string
		arg2 interface{}
	}{arg1, arg2})
	fake.recordInvocation("NodesTask", []interface{}{arg1, arg2})
	fake.nodesTaskMutex.Unlock()
	if fake.NodesTaskStub != nil {
		return fake.NodesTaskStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nodesTaskReturns
	return fakeReturns.result1
}

func (fake *FakeHttpClient) NodesTaskCallCount() int {
	fake.nodesTaskMutex.RLock()
	defer fake.nodesTaskMutex.RUnlock()
	return len(fake.nodesTaskArgsForCall)
}

func (fake *FakeHttpClient) NodesTaskCalls(stub func(string, interface{}) error) {
	fake.nodesTaskMutex.Lock()
	defer fake.nodesTaskMutex.Unlock()
	fake.NodesTaskStub = stub
}

func (fake *FakeHttpClient) NodesTaskArgsForCall(i int) (string, interface{}) {
	fake.nodesTaskMutex.RLock()
	defer fake.nodesTaskMutex.RUnlock()
	argsForCall := fake.nodesTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) NodesTaskReturns(result1 error) {
	fake.nodesTaskMutex.Lock()
	defer fake.nodesTaskMutex.Unlock()
	fake.NodesTaskStub = nil
	fake.nodesTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) NodesTaskReturnsOnCall(i int, result1 error) {
	fake.nodesTaskMutex.Lock()
	defer fake.nodesTaskMutex.Unlock()
	fake.NodesTaskStub = nil
	if fake.nodesTaskReturnsOnCall == nil {
		fake.nodesTaskReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.nodesTaskReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) PipelineCreate(arg1 map[string]interface{}) (event.APIResponse, error) {
	fake.pipelineCreateMutex.Lock()
	ret, specificReturn := fake.pipelineCreateReturnsOnCall[len(fake.pipelineCreateArgsForCall)]
	fake.pipelineCreateArgsForCall = append(fake.pipelineCreateArgsForCall, struct {
		arg1 map[string]interface{}
	}{arg1})
	fake.recordInvocation("PipelineCreate", []interface{}{arg1})
	fake.pipelineCreateMutex.Unlock()
	if fake.PipelineCreateStub != nil {
		return fake.PipelineCreateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.pipelineCreateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) PipelineCreateCallCount() int {
	fake.pipelineCreateMutex.RLock()
	defer fake.pipelineCreateMutex.RUnlock()
	return len(fake.pipelineCreateArgsForCall)
}

func (fake *FakeHttpClient) PipelineCreateCalls(stub func(map[string]interface{}) (event.APIResponse, error)) {
	fake.pipelineCreateMutex.Lock()
	defer fake.pipelineCreateMutex.Unlock()
	fake.PipelineCreateStub = stub
}

func (fake *FakeHttpClient) PipelineCreateArgsForCall(i int) map[string]interface{} {
	fake.pipelineCreateMutex.RLock()
	defer fake.pipelineCreateMutex.RUnlock()
	argsForCall := fake.pipelineCreateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) PipelineCreateReturns(result1 event.APIResponse, result2 error) {
	fake.pipelineCreateMutex.Lock()
	defer fake.pipelineCreateMutex.Unlock()
	fake.PipelineCreateStub = nil
	fake.pipelineCreateReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) PipelineCreateReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.pipelineCreateMutex.Lock()
	defer fake.pipelineCreateMutex.Unlock()
	fake.PipelineCreateStub = nil
	if fake.pipelineCreateReturnsOnCall == nil {
		fake.pipelineCreateReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.pipelineCreateReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) PipelineDelete(arg1 string) (event.APIResponse, error) {
	fake.pipelineDeleteMutex.Lock()
	ret, specificReturn := fake.pipelineDeleteReturnsOnCall[len(fake.pipelineDeleteArgsForCall)]
	fake.pipelineDeleteArgsForCall = append(fake.pipelineDeleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("PipelineDelete", []interface{}{arg1})
	fake.pipelineDeleteMutex.Unlock()
	if fake.PipelineDeleteStub != nil {
		return fake.PipelineDeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.pipelineDeleteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) PipelineDeleteCallCount() int {
	fake.pipelineDeleteMutex.RLock()
	defer fake.pipelineDeleteMutex.RUnlock()
	return len(fake.pipelineDeleteArgsForCall)
}

func (fake *FakeHttpClient) PipelineDeleteCalls(stub func(string) (event.APIResponse, error)) {
	fake.pipelineDeleteMutex.Lock()
	defer fake.pipelineDeleteMutex.Unlock()
	fake.PipelineDeleteStub = stub
}

func (fake *FakeHttpClient) PipelineDeleteArgsForCall(i int) string {
	fake.pipelineDeleteMutex.RLock()
	defer fake.pipelineDeleteMutex.RUnlock()
	argsForCall := fake.pipelineDeleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) PipelineDeleteReturns(result1 event.APIResponse, result2 error) {
	fake.pipelineDeleteMutex.Lock()
	defer fake.pipelineDeleteMutex.Unlock()
	fake.PipelineDeleteStub = nil
	fake.pipelineDeleteReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) PipelineDeleteReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.pipelineDeleteMutex.Lock()
	defer fake.pipelineDeleteMutex.Unlock()
	fake.PipelineDeleteStub = nil
	if fake.pipelineDeleteReturnsOnCall == nil {
		fake.pipelineDeleteReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.pipelineDeleteReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) PlanCreate(arg1 map[string]interface{}) (event.APIResponse, error) {
	fake.planCreateMutex.Lock()
	ret, specificReturn := fake.planCreateReturnsOnCall[len(fake.planCreateArgsForCall)]
	fake.planCreateArgsForCall = append(fake.planCreateArgsForCall, struct {
		arg1 map[string]interface{}
	}{arg1})
	fake.recordInvocation("PlanCreate", []interface{}{arg1})
	fake.planCreateMutex.Unlock()
	if fake.PlanCreateStub != nil {
		return fake.PlanCreateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.planCreateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) PlanCreateCallCount() int {
	fake.planCreateMutex.RLock()
	defer fake.planCreateMutex.RUnlock()
	return len(fake.planCreateArgsForCall)
}

func (fake *FakeHttpClient) PlanCreateCalls(stub func(map[string]interface{}) (event.APIResponse, error)) {
	fake.planCreateMutex.Lock()
	defer fake.planCreateMutex.Unlock()
	fake.PlanCreateStub = stub
}

func (fake *FakeHttpClient) PlanCreateArgsForCall(i int) map[string]interface{} {
	fake.planCreateMutex.RLock()
	defer fake.planCreateMutex.RUnlock()
	argsForCall := fake.planCreateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) PlanCreateReturns(result1 event.APIResponse, result2 error) {
	fake.planCreateMutex.Lock()
	defer fake.planCreateMutex.Unlock()
	fake.PlanCreateStub = nil
	fake.planCreateReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) PlanCreateReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.planCreateMutex.Lock()
	defer fake.planCreateMutex.Unlock()
	fake.PlanCreateStub = nil
	if fake.planCreateReturnsOnCall == nil {
		fake.planCreateReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.planCreateReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) PlanDelete(arg1 string) (event.APIResponse, error) {
	fake.planDeleteMutex.Lock()
	ret, specificReturn := fake.planDeleteReturnsOnCall[len(fake.planDeleteArgsForCall)]
	fake.planDeleteArgsForCall = append(fake.planDeleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("PlanDelete", []interface{}{arg1})
	fake.planDeleteMutex.Unlock()
	if fake.PlanDeleteStub != nil {
		return fake.PlanDeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.planDeleteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) PlanDeleteCallCount() int {
	fake.planDeleteMutex.RLock()
	defer fake.planDeleteMutex.RUnlock()
	return len(fake.planDeleteArgsForCall)
}

func (fake *FakeHttpClient) PlanDeleteCalls(stub func(string) (event.APIResponse, error)) {
	fake.planDeleteMutex.Lock()
	defer fake.planDeleteMutex.Unlock()
	fake.PlanDeleteStub = stub
}

func (fake *FakeHttpClient) PlanDeleteArgsForCall(i int) string {
	fake.planDeleteMutex.RLock()
	defer fake.planDeleteMutex.RUnlock()
	argsForCall := fake.planDeleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) PlanDeleteReturns(result1 event.APIResponse, result2 error) {
	fake.planDeleteMutex.Lock()
	defer fake.planDeleteMutex.Unlock()
	fake.PlanDeleteStub = nil
	fake.planDeleteReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) PlanDeleteReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.planDeleteMutex.Lock()
	defer fake.planDeleteMutex.Unlock()
	fake.PlanDeleteStub = nil
	if fake.planDeleteReturnsOnCall == nil {
		fake.planDeleteReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.planDeleteReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) RegisterNode(arg1 string, arg2 string) (event.APIResponse, error) {
	fake.registerNodeMutex.Lock()
	ret, specificReturn := fake.registerNodeReturnsOnCall[len(fake.registerNodeArgsForCall)]
	fake.registerNodeArgsForCall = append(fake.registerNodeArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RegisterNode", []interface{}{arg1, arg2})
	fake.registerNodeMutex.Unlock()
	if fake.RegisterNodeStub != nil {
		return fake.RegisterNodeStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerNodeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) RegisterNodeCallCount() int {
	fake.registerNodeMutex.RLock()
	defer fake.registerNodeMutex.RUnlock()
	return len(fake.registerNodeArgsForCall)
}

func (fake *FakeHttpClient) RegisterNodeCalls(stub func(string, string) (event.APIResponse, error)) {
	fake.registerNodeMutex.Lock()
	defer fake.registerNodeMutex.Unlock()
	fake.RegisterNodeStub = stub
}

func (fake *FakeHttpClient) RegisterNodeArgsForCall(i int) (string, string) {
	fake.registerNodeMutex.RLock()
	defer fake.registerNodeMutex.RUnlock()
	argsForCall := fake.registerNodeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) RegisterNodeReturns(result1 event.APIResponse, result2 error) {
	fake.registerNodeMutex.Lock()
	defer fake.registerNodeMutex.Unlock()
	fake.RegisterNodeStub = nil
	fake.registerNodeReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) RegisterNodeReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.registerNodeMutex.Lock()
	defer fake.registerNodeMutex.Unlock()
	fake.RegisterNodeStub = nil
	if fake.registerNodeReturnsOnCall == nil {
		fake.registerNodeReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.registerNodeReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) RemoveNode(arg1 string) (event.APIResponse, error) {
	fake.removeNodeMutex.Lock()
	ret, specificReturn := fake.removeNodeReturnsOnCall[len(fake.removeNodeArgsForCall)]
	fake.removeNodeArgsForCall = append(fake.removeNodeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RemoveNode", []interface{}{arg1})
	fake.removeNodeMutex.Unlock()
	if fake.RemoveNodeStub != nil {
		return fake.RemoveNodeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removeNodeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) RemoveNodeCallCount() int {
	fake.removeNodeMutex.RLock()
	defer fake.removeNodeMutex.RUnlock()
	return len(fake.removeNodeArgsForCall)
}

func (fake *FakeHttpClient) RemoveNodeCalls(stub func(string) (event.APIResponse, error)) {
	fake.removeNodeMutex.Lock()
	defer fake.removeNodeMutex.Unlock()
	fake.RemoveNodeStub = stub
}

func (fake *FakeHttpClient) RemoveNodeArgsForCall(i int) string {
	fake.removeNodeMutex.RLock()
	defer fake.removeNodeMutex.RUnlock()
	argsForCall := fake.removeNodeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) RemoveNodeReturns(result1 event.APIResponse, result2 error) {
	fake.removeNodeMutex.Lock()
	defer fake.removeNodeMutex.Unlock()
	fake.RemoveNodeStub = nil
	fake.removeNodeReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) RemoveNodeReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.removeNodeMutex.Lock()
	defer fake.removeNodeMutex.Unlock()
	fake.RemoveNodeStub = nil
	if fake.removeNodeReturnsOnCall == nil {
		fake.removeNodeReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.removeNodeReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) RunTask() {
	fake.runTaskMutex.Lock()
	fake.runTaskArgsForCall = append(fake.runTaskArgsForCall, struct {
	}{})
	fake.recordInvocation("RunTask", []interface{}{})
	fake.runTaskMutex.Unlock()
	if fake.RunTaskStub != nil {
		fake.RunTaskStub()
	}
}

func (fake *FakeHttpClient) RunTaskCallCount() int {
	fake.runTaskMutex.RLock()
	defer fake.runTaskMutex.RUnlock()
	return len(fake.runTaskArgsForCall)
}

func (fake *FakeHttpClient) RunTaskCalls(stub func()) {
	fake.runTaskMutex.Lock()
	defer fake.runTaskMutex.Unlock()
	fake.RunTaskStub = stub
}

func (fake *FakeHttpClient) SecretCreate(arg1 string) (event.APIResponse, error) {
	fake.secretCreateMutex.Lock()
	ret, specificReturn := fake.secretCreateReturnsOnCall[len(fake.secretCreateArgsForCall)]
	fake.secretCreateArgsForCall = append(fake.secretCreateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SecretCreate", []interface{}{arg1})
	fake.secretCreateMutex.Unlock()
	if fake.SecretCreateStub != nil {
		return fake.SecretCreateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.secretCreateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) SecretCreateCallCount() int {
	fake.secretCreateMutex.RLock()
	defer fake.secretCreateMutex.RUnlock()
	return len(fake.secretCreateArgsForCall)
}

func (fake *FakeHttpClient) SecretCreateCalls(stub func(string) (event.APIResponse, error)) {
	fake.secretCreateMutex.Lock()
	defer fake.secretCreateMutex.Unlock()
	fake.SecretCreateStub = stub
}

func (fake *FakeHttpClient) SecretCreateArgsForCall(i int) string {
	fake.secretCreateMutex.RLock()
	defer fake.secretCreateMutex.RUnlock()
	argsForCall := fake.secretCreateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SecretCreateReturns(result1 event.APIResponse, result2 error) {
	fake.secretCreateMutex.Lock()
	defer fake.secretCreateMutex.Unlock()
	fake.SecretCreateStub = nil
	fake.secretCreateReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SecretCreateReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.secretCreateMutex.Lock()
	defer fake.secretCreateMutex.Unlock()
	fake.SecretCreateStub = nil
	if fake.secretCreateReturnsOnCall == nil {
		fake.secretCreateReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.secretCreateReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SecretDelete(arg1 string) (event.APIResponse, error) {
	fake.secretDeleteMutex.Lock()
	ret, specificReturn := fake.secretDeleteReturnsOnCall[len(fake.secretDeleteArgsForCall)]
	fake.secretDeleteArgsForCall = append(fake.secretDeleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SecretDelete", []interface{}{arg1})
	fake.secretDeleteMutex.Unlock()
	if fake.SecretDeleteStub != nil {
		return fake.SecretDeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.secretDeleteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) SecretDeleteCallCount() int {
	fake.secretDeleteMutex.RLock()
	defer fake.secretDeleteMutex.RUnlock()
	return len(fake.secretDeleteArgsForCall)
}

func (fake *FakeHttpClient) SecretDeleteCalls(stub func(string) (event.APIResponse, error)) {
	fake.secretDeleteMutex.Lock()
	defer fake.secretDeleteMutex.Unlock()
	fake.SecretDeleteStub = stub
}

func (fake *FakeHttpClient) SecretDeleteArgsForCall(i int) string {
	fake.secretDeleteMutex.RLock()
	defer fake.secretDeleteMutex.RUnlock()
	argsForCall := fake.secretDeleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SecretDeleteReturns(result1 event.APIResponse, result2 error) {
	fake.secretDeleteMutex.Lock()
	defer fake.secretDeleteMutex.Unlock()
	fake.SecretDeleteStub = nil
	fake.secretDeleteReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SecretDeleteReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.secretDeleteMutex.Lock()
	defer fake.secretDeleteMutex.Unlock()
	fake.SecretDeleteStub = nil
	if fake.secretDeleteReturnsOnCall == nil {
		fake.secretDeleteReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.secretDeleteReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SecretEdit(arg1 map[string]interface{}) (event.APIResponse, error) {
	fake.secretEditMutex.Lock()
	ret, specificReturn := fake.secretEditReturnsOnCall[len(fake.secretEditArgsForCall)]
	fake.secretEditArgsForCall = append(fake.secretEditArgsForCall, struct {
		arg1 map[string]interface{}
	}{arg1})
	fake.recordInvocation("SecretEdit", []interface{}{arg1})
	fake.secretEditMutex.Unlock()
	if fake.SecretEditStub != nil {
		return fake.SecretEditStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.secretEditReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) SecretEditCallCount() int {
	fake.secretEditMutex.RLock()
	defer fake.secretEditMutex.RUnlock()
	return len(fake.secretEditArgsForCall)
}

func (fake *FakeHttpClient) SecretEditCalls(stub func(map[string]interface{}) (event.APIResponse, error)) {
	fake.secretEditMutex.Lock()
	defer fake.secretEditMutex.Unlock()
	fake.SecretEditStub = stub
}

func (fake *FakeHttpClient) SecretEditArgsForCall(i int) map[string]interface{} {
	fake.secretEditMutex.RLock()
	defer fake.secretEditMutex.RUnlock()
	argsForCall := fake.secretEditArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SecretEditReturns(result1 event.APIResponse, result2 error) {
	fake.secretEditMutex.Lock()
	defer fake.secretEditMutex.Unlock()
	fake.SecretEditStub = nil
	fake.secretEditReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SecretEditReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.secretEditMutex.Lock()
	defer fake.secretEditMutex.Unlock()
	fake.SecretEditStub = nil
	if fake.secretEditReturnsOnCall == nil {
		fake.secretEditReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.secretEditReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SetActiveReport(arg1 bool) {
	fake.setActiveReportMutex.Lock()
	fake.setActiveReportArgsForCall = append(fake.setActiveReportArgsForCall, struct {
		arg1 bool
	}{arg1})
	fake.recordInvocation("SetActiveReport", []interface{}{arg1})
	fake.setActiveReportMutex.Unlock()
	if fake.SetActiveReportStub != nil {
		fake.SetActiveReportStub(arg1)
	}
}

func (fake *FakeHttpClient) SetActiveReportCallCount() int {
	fake.setActiveReportMutex.RLock()
	defer fake.setActiveReportMutex.RUnlock()
	return len(fake.setActiveReportArgsForCall)
}

func (fake *FakeHttpClient) SetActiveReportCalls(stub func(bool)) {
	fake.setActiveReportMutex.Lock()
	defer fake.setActiveReportMutex.Unlock()
	fake.SetActiveReportStub = stub
}

func (fake *FakeHttpClient) SetActiveReportArgsForCall(i int) bool {
	fake.setActiveReportMutex.RLock()
	defer fake.setActiveReportMutex.RUnlock()
	argsForCall := fake.setActiveReportArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SetAgent(arg1 *anagent.Anagent) {
	fake.setAgentMutex.Lock()
	fake.setAgentArgsForCall = append(fake.setAgentArgsForCall, struct {
		arg1 *anagent.Anagent
	}{arg1})
	fake.recordInvocation("SetAgent", []interface{}{arg1})
	fake.setAgentMutex.Unlock()
	if fake.SetAgentStub != nil {
		fake.SetAgentStub(arg1)
	}
}

func (fake *FakeHttpClient) SetAgentCallCount() int {
	fake.setAgentMutex.RLock()
	defer fake.setAgentMutex.RUnlock()
	return len(fake.setAgentArgsForCall)
}

func (fake *FakeHttpClient) SetAgentCalls(stub func(*anagent.Anagent)) {
	fake.setAgentMutex.Lock()
	defer fake.setAgentMutex.Unlock()
	fake.SetAgentStub = stub
}

func (fake *FakeHttpClient) SetAgentArgsForCall(i int) *anagent.Anagent {
	fake.setAgentMutex.RLock()
	defer fake.setAgentMutex.RUnlock()
	argsForCall := fake.setAgentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SetBaseURL(arg1 string) {
	fake.setBaseURLMutex.Lock()
	fake.setBaseURLArgsForCall = append(fake.setBaseURLArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SetBaseURL", []interface{}{arg1})
	fake.setBaseURLMutex.Unlock()
	if fake.SetBaseURLStub != nil {
		fake.SetBaseURLStub(arg1)
	}
}

func (fake *FakeHttpClient) SetBaseURLCallCount() int {
	fake.setBaseURLMutex.RLock()
	defer fake.setBaseURLMutex.RUnlock()
	return len(fake.setBaseURLArgsForCall)
}

func (fake *FakeHttpClient) SetBaseURLCalls(stub func(string)) {
	fake.setBaseURLMutex.Lock()
	defer fake.setBaseURLMutex.Unlock()
	fake.SetBaseURLStub = stub
}

func (fake *FakeHttpClient) SetBaseURLArgsForCall(i int) string {
	fake.setBaseURLMutex.RLock()
	defer fake.setBaseURLMutex.RUnlock()
	argsForCall := fake.setBaseURLArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SetTaskField(arg1 string, arg2 string) (event.APIResponse, error) {
	fake.setTaskFieldMutex.Lock()
	ret, specificReturn := fake.setTaskFieldReturnsOnCall[len(fake.setTaskFieldArgsForCall)]
	fake.setTaskFieldArgsForCall = append(fake.setTaskFieldArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("SetTaskField", []interface{}{arg1, arg2})
	fake.setTaskFieldMutex.Unlock()
	if fake.SetTaskFieldStub != nil {
		return fake.SetTaskFieldStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setTaskFieldReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) SetTaskFieldCallCount() int {
	fake.setTaskFieldMutex.RLock()
	defer fake.setTaskFieldMutex.RUnlock()
	return len(fake.setTaskFieldArgsForCall)
}

func (fake *FakeHttpClient) SetTaskFieldCalls(stub func(string, string) (event.APIResponse, error)) {
	fake.setTaskFieldMutex.Lock()
	defer fake.setTaskFieldMutex.Unlock()
	fake.SetTaskFieldStub = stub
}

func (fake *FakeHttpClient) SetTaskFieldArgsForCall(i int) (string, string) {
	fake.setTaskFieldMutex.RLock()
	defer fake.setTaskFieldMutex.RUnlock()
	argsForCall := fake.setTaskFieldArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) SetTaskFieldReturns(result1 event.APIResponse, result2 error) {
	fake.setTaskFieldMutex.Lock()
	defer fake.setTaskFieldMutex.Unlock()
	fake.SetTaskFieldStub = nil
	fake.setTaskFieldReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SetTaskFieldReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.setTaskFieldMutex.Lock()
	defer fake.setTaskFieldMutex.Unlock()
	fake.SetTaskFieldStub = nil
	if fake.setTaskFieldReturnsOnCall == nil {
		fake.setTaskFieldReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.setTaskFieldReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SetTaskOutput(arg1 string) (event.APIResponse, error) {
	fake.setTaskOutputMutex.Lock()
	ret, specificReturn := fake.setTaskOutputReturnsOnCall[len(fake.setTaskOutputArgsForCall)]
	fake.setTaskOutputArgsForCall = append(fake.setTaskOutputArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SetTaskOutput", []interface{}{arg1})
	fake.setTaskOutputMutex.Unlock()
	if fake.SetTaskOutputStub != nil {
		return fake.SetTaskOutputStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setTaskOutputReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) SetTaskOutputCallCount() int {
	fake.setTaskOutputMutex.RLock()
	defer fake.setTaskOutputMutex.RUnlock()
	return len(fake.setTaskOutputArgsForCall)
}

func (fake *FakeHttpClient) SetTaskOutputCalls(stub func(string) (event.APIResponse, error)) {
	fake.setTaskOutputMutex.Lock()
	defer fake.setTaskOutputMutex.Unlock()
	fake.SetTaskOutputStub = stub
}

func (fake *FakeHttpClient) SetTaskOutputArgsForCall(i int) string {
	fake.setTaskOutputMutex.RLock()
	defer fake.setTaskOutputMutex.RUnlock()
	argsForCall := fake.setTaskOutputArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SetTaskOutputReturns(result1 event.APIResponse, result2 error) {
	fake.setTaskOutputMutex.Lock()
	defer fake.setTaskOutputMutex.Unlock()
	fake.SetTaskOutputStub = nil
	fake.setTaskOutputReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SetTaskOutputReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.setTaskOutputMutex.Lock()
	defer fake.setTaskOutputMutex.Unlock()
	fake.SetTaskOutputStub = nil
	if fake.setTaskOutputReturnsOnCall == nil {
		fake.setTaskOutputReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.setTaskOutputReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SetTaskResult(arg1 string) (event.APIResponse, error) {
	fake.setTaskResultMutex.Lock()
	ret, specificReturn := fake.setTaskResultReturnsOnCall[len(fake.setTaskResultArgsForCall)]
	fake.setTaskResultArgsForCall = append(fake.setTaskResultArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SetTaskResult", []interface{}{arg1})
	fake.setTaskResultMutex.Unlock()
	if fake.SetTaskResultStub != nil {
		return fake.SetTaskResultStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setTaskResultReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) SetTaskResultCallCount() int {
	fake.setTaskResultMutex.RLock()
	defer fake.setTaskResultMutex.RUnlock()
	return len(fake.setTaskResultArgsForCall)
}

func (fake *FakeHttpClient) SetTaskResultCalls(stub func(string) (event.APIResponse, error)) {
	fake.setTaskResultMutex.Lock()
	defer fake.setTaskResultMutex.Unlock()
	fake.SetTaskResultStub = stub
}

func (fake *FakeHttpClient) SetTaskResultArgsForCall(i int) string {
	fake.setTaskResultMutex.RLock()
	defer fake.setTaskResultMutex.RUnlock()
	argsForCall := fake.setTaskResultArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SetTaskResultReturns(result1 event.APIResponse, result2 error) {
	fake.setTaskResultMutex.Lock()
	defer fake.setTaskResultMutex.Unlock()
	fake.SetTaskResultStub = nil
	fake.setTaskResultReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SetTaskResultReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.setTaskResultMutex.Lock()
	defer fake.setTaskResultMutex.Unlock()
	fake.SetTaskResultStub = nil
	if fake.setTaskResultReturnsOnCall == nil {
		fake.setTaskResultReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.setTaskResultReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SetTaskStatus(arg1 string) (event.APIResponse, error) {
	fake.setTaskStatusMutex.Lock()
	ret, specificReturn := fake.setTaskStatusReturnsOnCall[len(fake.setTaskStatusArgsForCall)]
	fake.setTaskStatusArgsForCall = append(fake.setTaskStatusArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SetTaskStatus", []interface{}{arg1})
	fake.setTaskStatusMutex.Unlock()
	if fake.SetTaskStatusStub != nil {
		return fake.SetTaskStatusStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setTaskStatusReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) SetTaskStatusCallCount() int {
	fake.setTaskStatusMutex.RLock()
	defer fake.setTaskStatusMutex.RUnlock()
	return len(fake.setTaskStatusArgsForCall)
}

func (fake *FakeHttpClient) SetTaskStatusCalls(stub func(string) (event.APIResponse, error)) {
	fake.setTaskStatusMutex.Lock()
	defer fake.setTaskStatusMutex.Unlock()
	fake.SetTaskStatusStub = stub
}

func (fake *FakeHttpClient) SetTaskStatusArgsForCall(i int) string {
	fake.setTaskStatusMutex.RLock()
	defer fake.setTaskStatusMutex.RUnlock()
	argsForCall := fake.setTaskStatusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SetTaskStatusReturns(result1 event.APIResponse, result2 error) {
	fake.setTaskStatusMutex.Lock()
	defer fake.setTaskStatusMutex.Unlock()
	fake.SetTaskStatusStub = nil
	fake.setTaskStatusReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SetTaskStatusReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.setTaskStatusMutex.Lock()
	defer fake.setTaskStatusMutex.Unlock()
	fake.SetTaskStatusStub = nil
	if fake.setTaskStatusReturnsOnCall == nil {
		fake.setTaskStatusReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.setTaskStatusReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SetToken(arg1 string) {
	fake.setTokenMutex.Lock()
	fake.setTokenArgsForCall = append(fake.setTokenArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SetToken", []interface{}{arg1})
	fake.setTokenMutex.Unlock()
	if fake.SetTokenStub != nil {
		fake.SetTokenStub(arg1)
	}
}

func (fake *FakeHttpClient) SetTokenCallCount() int {
	fake.setTokenMutex.RLock()
	defer fake.setTokenMutex.RUnlock()
	return len(fake.setTokenArgsForCall)
}

func (fake *FakeHttpClient) SetTokenCalls(stub func(string)) {
	fake.setTokenMutex.Lock()
	defer fake.setTokenMutex.Unlock()
	fake.SetTokenStub = stub
}

func (fake *FakeHttpClient) SetTokenArgsForCall(i int) string {
	fake.setTokenMutex.RLock()
	defer fake.setTokenMutex.RUnlock()
	argsForCall := fake.setTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SetUploadChunkSize(arg1 int) {
	fake.setUploadChunkSizeMutex.Lock()
	fake.setUploadChunkSizeArgsForCall = append(fake.setUploadChunkSizeArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("SetUploadChunkSize", []interface{}{arg1})
	fake.setUploadChunkSizeMutex.Unlock()
	if fake.SetUploadChunkSizeStub != nil {
		fake.SetUploadChunkSizeStub(arg1)
	}
}

func (fake *FakeHttpClient) SetUploadChunkSizeCallCount() int {
	fake.setUploadChunkSizeMutex.RLock()
	defer fake.setUploadChunkSizeMutex.RUnlock()
	return len(fake.setUploadChunkSizeArgsForCall)
}

func (fake *FakeHttpClient) SetUploadChunkSizeCalls(stub func(int)) {
	fake.setUploadChunkSizeMutex.Lock()
	defer fake.setUploadChunkSizeMutex.Unlock()
	fake.SetUploadChunkSizeStub = stub
}

func (fake *FakeHttpClient) SetUploadChunkSizeArgsForCall(i int) int {
	fake.setUploadChunkSizeMutex.RLock()
	defer fake.setUploadChunkSizeMutex.RUnlock()
	argsForCall := fake.setUploadChunkSizeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SettingCreate(arg1 map[string]interface{}) (event.APIResponse, error) {
	fake.settingCreateMutex.Lock()
	ret, specificReturn := fake.settingCreateReturnsOnCall[len(fake.settingCreateArgsForCall)]
	fake.settingCreateArgsForCall = append(fake.settingCreateArgsForCall, struct {
		arg1 map[string]interface{}
	}{arg1})
	fake.recordInvocation("SettingCreate", []interface{}{arg1})
	fake.settingCreateMutex.Unlock()
	if fake.SettingCreateStub != nil {
		return fake.SettingCreateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.settingCreateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) SettingCreateCallCount() int {
	fake.settingCreateMutex.RLock()
	defer fake.settingCreateMutex.RUnlock()
	return len(fake.settingCreateArgsForCall)
}

func (fake *FakeHttpClient) SettingCreateCalls(stub func(map[string]interface{}) (event.APIResponse, error)) {
	fake.settingCreateMutex.Lock()
	defer fake.settingCreateMutex.Unlock()
	fake.SettingCreateStub = stub
}

func (fake *FakeHttpClient) SettingCreateArgsForCall(i int) map[string]interface{} {
	fake.settingCreateMutex.RLock()
	defer fake.settingCreateMutex.RUnlock()
	argsForCall := fake.settingCreateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SettingCreateReturns(result1 event.APIResponse, result2 error) {
	fake.settingCreateMutex.Lock()
	defer fake.settingCreateMutex.Unlock()
	fake.SettingCreateStub = nil
	fake.settingCreateReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SettingCreateReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.settingCreateMutex.Lock()
	defer fake.settingCreateMutex.Unlock()
	fake.SettingCreateStub = nil
	if fake.settingCreateReturnsOnCall == nil {
		fake.settingCreateReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.settingCreateReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SettingRemove(arg1 string) (event.APIResponse, error) {
	fake.settingRemoveMutex.Lock()
	ret, specificReturn := fake.settingRemoveReturnsOnCall[len(fake.settingRemoveArgsForCall)]
	fake.settingRemoveArgsForCall = append(fake.settingRemoveArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SettingRemove", []interface{}{arg1})
	fake.settingRemoveMutex.Unlock()
	if fake.SettingRemoveStub != nil {
		return fake.SettingRemoveStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.settingRemoveReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) SettingRemoveCallCount() int {
	fake.settingRemoveMutex.RLock()
	defer fake.settingRemoveMutex.RUnlock()
	return len(fake.settingRemoveArgsForCall)
}

func (fake *FakeHttpClient) SettingRemoveCalls(stub func(string) (event.APIResponse, error)) {
	fake.settingRemoveMutex.Lock()
	defer fake.settingRemoveMutex.Unlock()
	fake.SettingRemoveStub = stub
}

func (fake *FakeHttpClient) SettingRemoveArgsForCall(i int) string {
	fake.settingRemoveMutex.RLock()
	defer fake.settingRemoveMutex.RUnlock()
	argsForCall := fake.settingRemoveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SettingRemoveReturns(result1 event.APIResponse, result2 error) {
	fake.settingRemoveMutex.Lock()
	defer fake.settingRemoveMutex.Unlock()
	fake.SettingRemoveStub = nil
	fake.settingRemoveReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SettingRemoveReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.settingRemoveMutex.Lock()
	defer fake.settingRemoveMutex.Unlock()
	fake.SettingRemoveStub = nil
	if fake.settingRemoveReturnsOnCall == nil {
		fake.settingRemoveReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.settingRemoveReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SettingUpdate(arg1 map[string]interface{}) (event.APIResponse, error) {
	fake.settingUpdateMutex.Lock()
	ret, specificReturn := fake.settingUpdateReturnsOnCall[len(fake.settingUpdateArgsForCall)]
	fake.settingUpdateArgsForCall = append(fake.settingUpdateArgsForCall, struct {
		arg1 map[string]interface{}
	}{arg1})
	fake.recordInvocation("SettingUpdate", []interface{}{arg1})
	fake.settingUpdateMutex.Unlock()
	if fake.SettingUpdateStub != nil {
		return fake.SettingUpdateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.settingUpdateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) SettingUpdateCallCount() int {
	fake.settingUpdateMutex.RLock()
	defer fake.settingUpdateMutex.RUnlock()
	return len(fake.settingUpdateArgsForCall)
}

func (fake *FakeHttpClient) SettingUpdateCalls(stub func(map[string]interface{}) (event.APIResponse, error)) {
	fake.settingUpdateMutex.Lock()
	defer fake.settingUpdateMutex.Unlock()
	fake.SettingUpdateStub = stub
}

func (fake *FakeHttpClient) SettingUpdateArgsForCall(i int) map[string]interface{} {
	fake.settingUpdateMutex.RLock()
	defer fake.settingUpdateMutex.RUnlock()
	argsForCall := fake.settingUpdateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SettingUpdateReturns(result1 event.APIResponse, result2 error) {
	fake.settingUpdateMutex.Lock()
	defer fake.settingUpdateMutex.Unlock()
	fake.SettingUpdateStub = nil
	fake.settingUpdateReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SettingUpdateReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.settingUpdateMutex.Lock()
	defer fake.settingUpdateMutex.Unlock()
	fake.SettingUpdateStub = nil
	if fake.settingUpdateReturnsOnCall == nil {
		fake.settingUpdateReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.settingUpdateReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SetupTask() (event.APIResponse, error) {
	fake.setupTaskMutex.Lock()
	ret, specificReturn := fake.setupTaskReturnsOnCall[len(fake.setupTaskArgsForCall)]
	fake.setupTaskArgsForCall = append(fake.setupTaskArgsForCall, struct {
	}{})
	fake.recordInvocation("SetupTask", []interface{}{})
	fake.setupTaskMutex.Unlock()
	if fake.SetupTaskStub != nil {
		return fake.SetupTaskStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setupTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) SetupTaskCallCount() int {
	fake.setupTaskMutex.RLock()
	defer fake.setupTaskMutex.RUnlock()
	return len(fake.setupTaskArgsForCall)
}

func (fake *FakeHttpClient) SetupTaskCalls(stub func() (event.APIResponse, error)) {
	fake.setupTaskMutex.Lock()
	defer fake.setupTaskMutex.Unlock()
	fake.SetupTaskStub = stub
}

func (fake *FakeHttpClient) SetupTaskReturns(result1 event.APIResponse, result2 error) {
	fake.setupTaskMutex.Lock()
	defer fake.setupTaskMutex.Unlock()
	fake.SetupTaskStub = nil
	fake.setupTaskReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) SetupTaskReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.setupTaskMutex.Lock()
	defer fake.setupTaskMutex.Unlock()
	fake.SetupTaskStub = nil
	if fake.setupTaskReturnsOnCall == nil {
		fake.setupTaskReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.setupTaskReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) StartTask(arg1 string) (event.APIResponse, error) {
	fake.startTaskMutex.Lock()
	ret, specificReturn := fake.startTaskReturnsOnCall[len(fake.startTaskArgsForCall)]
	fake.startTaskArgsForCall = append(fake.startTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("StartTask", []interface{}{arg1})
	fake.startTaskMutex.Unlock()
	if fake.StartTaskStub != nil {
		return fake.StartTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.startTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) StartTaskCallCount() int {
	fake.startTaskMutex.RLock()
	defer fake.startTaskMutex.RUnlock()
	return len(fake.startTaskArgsForCall)
}

func (fake *FakeHttpClient) StartTaskCalls(stub func(string) (event.APIResponse, error)) {
	fake.startTaskMutex.Lock()
	defer fake.startTaskMutex.Unlock()
	fake.StartTaskStub = stub
}

func (fake *FakeHttpClient) StartTaskArgsForCall(i int) string {
	fake.startTaskMutex.RLock()
	defer fake.startTaskMutex.RUnlock()
	argsForCall := fake.startTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) StartTaskReturns(result1 event.APIResponse, result2 error) {
	fake.startTaskMutex.Lock()
	defer fake.startTaskMutex.Unlock()
	fake.StartTaskStub = nil
	fake.startTaskReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) StartTaskReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.startTaskMutex.Lock()
	defer fake.startTaskMutex.Unlock()
	fake.StartTaskStub = nil
	if fake.startTaskReturnsOnCall == nil {
		fake.startTaskReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.startTaskReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) StopTask(arg1 string) (event.APIResponse, error) {
	fake.stopTaskMutex.Lock()
	ret, specificReturn := fake.stopTaskReturnsOnCall[len(fake.stopTaskArgsForCall)]
	fake.stopTaskArgsForCall = append(fake.stopTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("StopTask", []interface{}{arg1})
	fake.stopTaskMutex.Unlock()
	if fake.StopTaskStub != nil {
		return fake.StopTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.stopTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) StopTaskCallCount() int {
	fake.stopTaskMutex.RLock()
	defer fake.stopTaskMutex.RUnlock()
	return len(fake.stopTaskArgsForCall)
}

func (fake *FakeHttpClient) StopTaskCalls(stub func(string) (event.APIResponse, error)) {
	fake.stopTaskMutex.Lock()
	defer fake.stopTaskMutex.Unlock()
	fake.StopTaskStub = stub
}

func (fake *FakeHttpClient) StopTaskArgsForCall(i int) string {
	fake.stopTaskMutex.RLock()
	defer fake.stopTaskMutex.RUnlock()
	argsForCall := fake.stopTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) StopTaskReturns(result1 event.APIResponse, result2 error) {
	fake.stopTaskMutex.Lock()
	defer fake.stopTaskMutex.Unlock()
	fake.StopTaskStub = nil
	fake.stopTaskReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) StopTaskReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.stopTaskMutex.Lock()
	defer fake.stopTaskMutex.Unlock()
	fake.StopTaskStub = nil
	if fake.stopTaskReturnsOnCall == nil {
		fake.stopTaskReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.stopTaskReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) StorageCreate(arg1 string) (event.APIResponse, error) {
	fake.storageCreateMutex.Lock()
	ret, specificReturn := fake.storageCreateReturnsOnCall[len(fake.storageCreateArgsForCall)]
	fake.storageCreateArgsForCall = append(fake.storageCreateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("StorageCreate", []interface{}{arg1})
	fake.storageCreateMutex.Unlock()
	if fake.StorageCreateStub != nil {
		return fake.StorageCreateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.storageCreateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) StorageCreateCallCount() int {
	fake.storageCreateMutex.RLock()
	defer fake.storageCreateMutex.RUnlock()
	return len(fake.storageCreateArgsForCall)
}

func (fake *FakeHttpClient) StorageCreateCalls(stub func(string) (event.APIResponse, error)) {
	fake.storageCreateMutex.Lock()
	defer fake.storageCreateMutex.Unlock()
	fake.StorageCreateStub = stub
}

func (fake *FakeHttpClient) StorageCreateArgsForCall(i int) string {
	fake.storageCreateMutex.RLock()
	defer fake.storageCreateMutex.RUnlock()
	argsForCall := fake.storageCreateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) StorageCreateReturns(result1 event.APIResponse, result2 error) {
	fake.storageCreateMutex.Lock()
	defer fake.storageCreateMutex.Unlock()
	fake.StorageCreateStub = nil
	fake.storageCreateReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) StorageCreateReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.storageCreateMutex.Lock()
	defer fake.storageCreateMutex.Unlock()
	fake.StorageCreateStub = nil
	if fake.storageCreateReturnsOnCall == nil {
		fake.storageCreateReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.storageCreateReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) StorageDelete(arg1 string) (event.APIResponse, error) {
	fake.storageDeleteMutex.Lock()
	ret, specificReturn := fake.storageDeleteReturnsOnCall[len(fake.storageDeleteArgsForCall)]
	fake.storageDeleteArgsForCall = append(fake.storageDeleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("StorageDelete", []interface{}{arg1})
	fake.storageDeleteMutex.Unlock()
	if fake.StorageDeleteStub != nil {
		return fake.StorageDeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.storageDeleteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) StorageDeleteCallCount() int {
	fake.storageDeleteMutex.RLock()
	defer fake.storageDeleteMutex.RUnlock()
	return len(fake.storageDeleteArgsForCall)
}

func (fake *FakeHttpClient) StorageDeleteCalls(stub func(string) (event.APIResponse, error)) {
	fake.storageDeleteMutex.Lock()
	defer fake.storageDeleteMutex.Unlock()
	fake.StorageDeleteStub = stub
}

func (fake *FakeHttpClient) StorageDeleteArgsForCall(i int) string {
	fake.storageDeleteMutex.RLock()
	defer fake.storageDeleteMutex.RUnlock()
	argsForCall := fake.storageDeleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) StorageDeleteReturns(result1 event.APIResponse, result2 error) {
	fake.storageDeleteMutex.Lock()
	defer fake.storageDeleteMutex.Unlock()
	fake.StorageDeleteStub = nil
	fake.storageDeleteReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) StorageDeleteReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.storageDeleteMutex.Lock()
	defer fake.storageDeleteMutex.Unlock()
	fake.StorageDeleteStub = nil
	if fake.storageDeleteReturnsOnCall == nil {
		fake.storageDeleteReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.storageDeleteReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) StorageFileList(arg1 string) ([]string, error) {
	fake.storageFileListMutex.Lock()
	ret, specificReturn := fake.storageFileListReturnsOnCall[len(fake.storageFileListArgsForCall)]
	fake.storageFileListArgsForCall = append(fake.storageFileListArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("StorageFileList", []interface{}{arg1})
	fake.storageFileListMutex.Unlock()
	if fake.StorageFileListStub != nil {
		return fake.StorageFileListStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.storageFileListReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) StorageFileListCallCount() int {
	fake.storageFileListMutex.RLock()
	defer fake.storageFileListMutex.RUnlock()
	return len(fake.storageFileListArgsForCall)
}

func (fake *FakeHttpClient) StorageFileListCalls(stub func(string) ([]string, error)) {
	fake.storageFileListMutex.Lock()
	defer fake.storageFileListMutex.Unlock()
	fake.StorageFileListStub = stub
}

func (fake *FakeHttpClient) StorageFileListArgsForCall(i int) string {
	fake.storageFileListMutex.RLock()
	defer fake.storageFileListMutex.RUnlock()
	argsForCall := fake.storageFileListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) StorageFileListReturns(result1 []string, result2 error) {
	fake.storageFileListMutex.Lock()
	defer fake.storageFileListMutex.Unlock()
	fake.StorageFileListStub = nil
	fake.storageFileListReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) StorageFileListReturnsOnCall(i int, result1 []string, result2 error) {
	fake.storageFileListMutex.Lock()
	defer fake.storageFileListMutex.Unlock()
	fake.StorageFileListStub = nil
	if fake.storageFileListReturnsOnCall == nil {
		fake.storageFileListReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.storageFileListReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) StorageRemovePath(arg1 string, arg2 string) (event.APIResponse, error) {
	fake.storageRemovePathMutex.Lock()
	ret, specificReturn := fake.storageRemovePathReturnsOnCall[len(fake.storageRemovePathArgsForCall)]
	fake.storageRemovePathArgsForCall = append(fake.storageRemovePathArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("StorageRemovePath", []interface{}{arg1, arg2})
	fake.storageRemovePathMutex.Unlock()
	if fake.StorageRemovePathStub != nil {
		return fake.StorageRemovePathStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.storageRemovePathReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) StorageRemovePathCallCount() int {
	fake.storageRemovePathMutex.RLock()
	defer fake.storageRemovePathMutex.RUnlock()
	return len(fake.storageRemovePathArgsForCall)
}

func (fake *FakeHttpClient) StorageRemovePathCalls(stub func(string, string) (event.APIResponse, error)) {
	fake.storageRemovePathMutex.Lock()
	defer fake.storageRemovePathMutex.Unlock()
	fake.StorageRemovePathStub = stub
}

func (fake *FakeHttpClient) StorageRemovePathArgsForCall(i int) (string, string) {
	fake.storageRemovePathMutex.RLock()
	defer fake.storageRemovePathMutex.RUnlock()
	argsForCall := fake.storageRemovePathArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) StorageRemovePathReturns(result1 event.APIResponse, result2 error) {
	fake.storageRemovePathMutex.Lock()
	defer fake.storageRemovePathMutex.Unlock()
	fake.StorageRemovePathStub = nil
	fake.storageRemovePathReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) StorageRemovePathReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.storageRemovePathMutex.Lock()
	defer fake.storageRemovePathMutex.Unlock()
	fake.StorageRemovePathStub = nil
	if fake.storageRemovePathReturnsOnCall == nil {
		fake.storageRemovePathReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.storageRemovePathReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) StreamOutput(arg1 io.Reader) {
	fake.streamOutputMutex.Lock()
	fake.streamOutputArgsForCall = append(fake.streamOutputArgsForCall, struct {
		arg1 io.Reader
	}{arg1})
	fake.recordInvocation("StreamOutput", []interface{}{arg1})
	fake.streamOutputMutex.Unlock()
	if fake.StreamOutputStub != nil {
		fake.StreamOutputStub(arg1)
	}
}

func (fake *FakeHttpClient) StreamOutputCallCount() int {
	fake.streamOutputMutex.RLock()
	defer fake.streamOutputMutex.RUnlock()
	return len(fake.streamOutputArgsForCall)
}

func (fake *FakeHttpClient) StreamOutputCalls(stub func(io.Reader)) {
	fake.streamOutputMutex.Lock()
	defer fake.streamOutputMutex.Unlock()
	fake.StreamOutputStub = stub
}

func (fake *FakeHttpClient) StreamOutputArgsForCall(i int) io.Reader {
	fake.streamOutputMutex.RLock()
	defer fake.streamOutputMutex.RUnlock()
	argsForCall := fake.streamOutputArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) SuccessTask() {
	fake.successTaskMutex.Lock()
	fake.successTaskArgsForCall = append(fake.successTaskArgsForCall, struct {
	}{})
	fake.recordInvocation("SuccessTask", []interface{}{})
	fake.successTaskMutex.Unlock()
	if fake.SuccessTaskStub != nil {
		fake.SuccessTaskStub()
	}
}

func (fake *FakeHttpClient) SuccessTaskCallCount() int {
	fake.successTaskMutex.RLock()
	defer fake.successTaskMutex.RUnlock()
	return len(fake.successTaskArgsForCall)
}

func (fake *FakeHttpClient) SuccessTaskCalls(stub func()) {
	fake.successTaskMutex.Lock()
	defer fake.successTaskMutex.Unlock()
	fake.SuccessTaskStub = stub
}

func (fake *FakeHttpClient) TaskDelete(arg1 string) (event.APIResponse, error) {
	fake.taskDeleteMutex.Lock()
	ret, specificReturn := fake.taskDeleteReturnsOnCall[len(fake.taskDeleteArgsForCall)]
	fake.taskDeleteArgsForCall = append(fake.taskDeleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("TaskDelete", []interface{}{arg1})
	fake.taskDeleteMutex.Unlock()
	if fake.TaskDeleteStub != nil {
		return fake.TaskDeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.taskDeleteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) TaskDeleteCallCount() int {
	fake.taskDeleteMutex.RLock()
	defer fake.taskDeleteMutex.RUnlock()
	return len(fake.taskDeleteArgsForCall)
}

func (fake *FakeHttpClient) TaskDeleteCalls(stub func(string) (event.APIResponse, error)) {
	fake.taskDeleteMutex.Lock()
	defer fake.taskDeleteMutex.Unlock()
	fake.TaskDeleteStub = stub
}

func (fake *FakeHttpClient) TaskDeleteArgsForCall(i int) string {
	fake.taskDeleteMutex.RLock()
	defer fake.taskDeleteMutex.RUnlock()
	argsForCall := fake.taskDeleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) TaskDeleteReturns(result1 event.APIResponse, result2 error) {
	fake.taskDeleteMutex.Lock()
	defer fake.taskDeleteMutex.Unlock()
	fake.TaskDeleteStub = nil
	fake.taskDeleteReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) TaskDeleteReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.taskDeleteMutex.Lock()
	defer fake.taskDeleteMutex.Unlock()
	fake.TaskDeleteStub = nil
	if fake.taskDeleteReturnsOnCall == nil {
		fake.taskDeleteReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.taskDeleteReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) TaskFileList(arg1 string) ([]string, error) {
	fake.taskFileListMutex.Lock()
	ret, specificReturn := fake.taskFileListReturnsOnCall[len(fake.taskFileListArgsForCall)]
	fake.taskFileListArgsForCall = append(fake.taskFileListArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("TaskFileList", []interface{}{arg1})
	fake.taskFileListMutex.Unlock()
	if fake.TaskFileListStub != nil {
		return fake.TaskFileListStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.taskFileListReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) TaskFileListCallCount() int {
	fake.taskFileListMutex.RLock()
	defer fake.taskFileListMutex.RUnlock()
	return len(fake.taskFileListArgsForCall)
}

func (fake *FakeHttpClient) TaskFileListCalls(stub func(string) ([]string, error)) {
	fake.taskFileListMutex.Lock()
	defer fake.taskFileListMutex.Unlock()
	fake.TaskFileListStub = stub
}

func (fake *FakeHttpClient) TaskFileListArgsForCall(i int) string {
	fake.taskFileListMutex.RLock()
	defer fake.taskFileListMutex.RUnlock()
	argsForCall := fake.taskFileListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) TaskFileListReturns(result1 []string, result2 error) {
	fake.taskFileListMutex.Lock()
	defer fake.taskFileListMutex.Unlock()
	fake.TaskFileListStub = nil
	fake.taskFileListReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) TaskFileListReturnsOnCall(i int, result1 []string, result2 error) {
	fake.taskFileListMutex.Lock()
	defer fake.taskFileListMutex.Unlock()
	fake.TaskFileListStub = nil
	if fake.taskFileListReturnsOnCall == nil {
		fake.taskFileListReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.taskFileListReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) TaskLog(arg1 string) ([]byte, error) {
	fake.taskLogMutex.Lock()
	ret, specificReturn := fake.taskLogReturnsOnCall[len(fake.taskLogArgsForCall)]
	fake.taskLogArgsForCall = append(fake.taskLogArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("TaskLog", []interface{}{arg1})
	fake.taskLogMutex.Unlock()
	if fake.TaskLogStub != nil {
		return fake.TaskLogStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.taskLogReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) TaskLogCallCount() int {
	fake.taskLogMutex.RLock()
	defer fake.taskLogMutex.RUnlock()
	return len(fake.taskLogArgsForCall)
}

func (fake *FakeHttpClient) TaskLogCalls(stub func(string) ([]byte, error)) {
	fake.taskLogMutex.Lock()
	defer fake.taskLogMutex.Unlock()
	fake.TaskLogStub = stub
}

func (fake *FakeHttpClient) TaskLogArgsForCall(i int) string {
	fake.taskLogMutex.RLock()
	defer fake.taskLogMutex.RUnlock()
	argsForCall := fake.taskLogArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) TaskLogReturns(result1 []byte, result2 error) {
	fake.taskLogMutex.Lock()
	defer fake.taskLogMutex.Unlock()
	fake.TaskLogStub = nil
	fake.taskLogReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) TaskLogReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.taskLogMutex.Lock()
	defer fake.taskLogMutex.Unlock()
	fake.TaskLogStub = nil
	if fake.taskLogReturnsOnCall == nil {
		fake.taskLogReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.taskLogReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) TaskLogArtefact(arg1 string) ([]byte, error) {
	fake.taskLogArtefactMutex.Lock()
	ret, specificReturn := fake.taskLogArtefactReturnsOnCall[len(fake.taskLogArtefactArgsForCall)]
	fake.taskLogArtefactArgsForCall = append(fake.taskLogArtefactArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("TaskLogArtefact", []interface{}{arg1})
	fake.taskLogArtefactMutex.Unlock()
	if fake.TaskLogArtefactStub != nil {
		return fake.TaskLogArtefactStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.taskLogArtefactReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) TaskLogArtefactCallCount() int {
	fake.taskLogArtefactMutex.RLock()
	defer fake.taskLogArtefactMutex.RUnlock()
	return len(fake.taskLogArtefactArgsForCall)
}

func (fake *FakeHttpClient) TaskLogArtefactCalls(stub func(string) ([]byte, error)) {
	fake.taskLogArtefactMutex.Lock()
	defer fake.taskLogArtefactMutex.Unlock()
	fake.TaskLogArtefactStub = stub
}

func (fake *FakeHttpClient) TaskLogArtefactArgsForCall(i int) string {
	fake.taskLogArtefactMutex.RLock()
	defer fake.taskLogArtefactMutex.RUnlock()
	argsForCall := fake.taskLogArtefactArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) TaskLogArtefactReturns(result1 []byte, result2 error) {
	fake.taskLogArtefactMutex.Lock()
	defer fake.taskLogArtefactMutex.Unlock()
	fake.TaskLogArtefactStub = nil
	fake.taskLogArtefactReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) TaskLogArtefactReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.taskLogArtefactMutex.Lock()
	defer fake.taskLogArtefactMutex.Unlock()
	fake.TaskLogArtefactStub = nil
	if fake.taskLogArtefactReturnsOnCall == nil {
		fake.taskLogArtefactReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.taskLogArtefactReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) TaskStream(arg1 string, arg2 string) ([]byte, error) {
	fake.taskStreamMutex.Lock()
	ret, specificReturn := fake.taskStreamReturnsOnCall[len(fake.taskStreamArgsForCall)]
	fake.taskStreamArgsForCall = append(fake.taskStreamArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("TaskStream", []interface{}{arg1, arg2})
	fake.taskStreamMutex.Unlock()
	if fake.TaskStreamStub != nil {
		return fake.TaskStreamStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.taskStreamReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) TaskStreamCallCount() int {
	fake.taskStreamMutex.RLock()
	defer fake.taskStreamMutex.RUnlock()
	return len(fake.taskStreamArgsForCall)
}

func (fake *FakeHttpClient) TaskStreamCalls(stub func(string, string) ([]byte, error)) {
	fake.taskStreamMutex.Lock()
	defer fake.taskStreamMutex.Unlock()
	fake.TaskStreamStub = stub
}

func (fake *FakeHttpClient) TaskStreamArgsForCall(i int) (string, string) {
	fake.taskStreamMutex.RLock()
	defer fake.taskStreamMutex.RUnlock()
	argsForCall := fake.taskStreamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) TaskStreamReturns(result1 []byte, result2 error) {
	fake.taskStreamMutex.Lock()
	defer fake.taskStreamMutex.Unlock()
	fake.TaskStreamStub = nil
	fake.taskStreamReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) TaskStreamReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.taskStreamMutex.Lock()
	defer fake.taskStreamMutex.Unlock()
	fake.TaskStreamStub = nil
	if fake.taskStreamReturnsOnCall == nil {
		fake.taskStreamReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.taskStreamReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) TokenCreate() (event.APIResponse, error) {
	fake.tokenCreateMutex.Lock()
	ret, specificReturn := fake.tokenCreateReturnsOnCall[len(fake.tokenCreateArgsForCall)]
	fake.tokenCreateArgsForCall = append(fake.tokenCreateArgsForCall, struct {
	}{})
	fake.recordInvocation("TokenCreate", []interface{}{})
	fake.tokenCreateMutex.Unlock()
	if fake.TokenCreateStub != nil {
		return fake.TokenCreateStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tokenCreateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) TokenCreateCallCount() int {
	fake.tokenCreateMutex.RLock()
	defer fake.tokenCreateMutex.RUnlock()
	return len(fake.tokenCreateArgsForCall)
}

func (fake *FakeHttpClient) TokenCreateCalls(stub func() (event.APIResponse, error)) {
	fake.tokenCreateMutex.Lock()
	defer fake.tokenCreateMutex.Unlock()
	fake.TokenCreateStub = stub
}

func (fake *FakeHttpClient) TokenCreateReturns(result1 event.APIResponse, result2 error) {
	fake.tokenCreateMutex.Lock()
	defer fake.tokenCreateMutex.Unlock()
	fake.TokenCreateStub = nil
	fake.tokenCreateReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) TokenCreateReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.tokenCreateMutex.Lock()
	defer fake.tokenCreateMutex.Unlock()
	fake.TokenCreateStub = nil
	if fake.tokenCreateReturnsOnCall == nil {
		fake.tokenCreateReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.tokenCreateReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) TokenDelete(arg1 string) (event.APIResponse, error) {
	fake.tokenDeleteMutex.Lock()
	ret, specificReturn := fake.tokenDeleteReturnsOnCall[len(fake.tokenDeleteArgsForCall)]
	fake.tokenDeleteArgsForCall = append(fake.tokenDeleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("TokenDelete", []interface{}{arg1})
	fake.tokenDeleteMutex.Unlock()
	if fake.TokenDeleteStub != nil {
		return fake.TokenDeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tokenDeleteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) TokenDeleteCallCount() int {
	fake.tokenDeleteMutex.RLock()
	defer fake.tokenDeleteMutex.RUnlock()
	return len(fake.tokenDeleteArgsForCall)
}

func (fake *FakeHttpClient) TokenDeleteCalls(stub func(string) (event.APIResponse, error)) {
	fake.tokenDeleteMutex.Lock()
	defer fake.tokenDeleteMutex.Unlock()
	fake.TokenDeleteStub = stub
}

func (fake *FakeHttpClient) TokenDeleteArgsForCall(i int) string {
	fake.tokenDeleteMutex.RLock()
	defer fake.tokenDeleteMutex.RUnlock()
	argsForCall := fake.tokenDeleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) TokenDeleteReturns(result1 event.APIResponse, result2 error) {
	fake.tokenDeleteMutex.Lock()
	defer fake.tokenDeleteMutex.Unlock()
	fake.TokenDeleteStub = nil
	fake.tokenDeleteReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) TokenDeleteReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.tokenDeleteMutex.Lock()
	defer fake.tokenDeleteMutex.Unlock()
	fake.TokenDeleteStub = nil
	if fake.tokenDeleteReturnsOnCall == nil {
		fake.tokenDeleteReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.tokenDeleteReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) UploadArtefact(arg1 string, arg2 string) error {
	fake.uploadArtefactMutex.Lock()
	ret, specificReturn := fake.uploadArtefactReturnsOnCall[len(fake.uploadArtefactArgsForCall)]
	fake.uploadArtefactArgsForCall = append(fake.uploadArtefactArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UploadArtefact", []interface{}{arg1, arg2})
	fake.uploadArtefactMutex.Unlock()
	if fake.UploadArtefactStub != nil {
		return fake.UploadArtefactStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.uploadArtefactReturns
	return fakeReturns.result1
}

func (fake *FakeHttpClient) UploadArtefactCallCount() int {
	fake.uploadArtefactMutex.RLock()
	defer fake.uploadArtefactMutex.RUnlock()
	return len(fake.uploadArtefactArgsForCall)
}

func (fake *FakeHttpClient) UploadArtefactCalls(stub func(string, string) error) {
	fake.uploadArtefactMutex.Lock()
	defer fake.uploadArtefactMutex.Unlock()
	fake.UploadArtefactStub = stub
}

func (fake *FakeHttpClient) UploadArtefactArgsForCall(i int) (string, string) {
	fake.uploadArtefactMutex.RLock()
	defer fake.uploadArtefactMutex.RUnlock()
	argsForCall := fake.uploadArtefactArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) UploadArtefactReturns(result1 error) {
	fake.uploadArtefactMutex.Lock()
	defer fake.uploadArtefactMutex.Unlock()
	fake.UploadArtefactStub = nil
	fake.uploadArtefactReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) UploadArtefactReturnsOnCall(i int, result1 error) {
	fake.uploadArtefactMutex.Lock()
	defer fake.uploadArtefactMutex.Unlock()
	fake.UploadArtefactStub = nil
	if fake.uploadArtefactReturnsOnCall == nil {
		fake.uploadArtefactReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadArtefactReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) UploadArtefactRetry(arg1 string, arg2 string, arg3 int) error {
	fake.uploadArtefactRetryMutex.Lock()
	ret, specificReturn := fake.uploadArtefactRetryReturnsOnCall[len(fake.uploadArtefactRetryArgsForCall)]
	fake.uploadArtefactRetryArgsForCall = append(fake.uploadArtefactRetryArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	fake.recordInvocation("UploadArtefactRetry", []interface{}{arg1, arg2, arg3})
	fake.uploadArtefactRetryMutex.Unlock()
	if fake.UploadArtefactRetryStub != nil {
		return fake.UploadArtefactRetryStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.uploadArtefactRetryReturns
	return fakeReturns.result1
}

func (fake *FakeHttpClient) UploadArtefactRetryCallCount() int {
	fake.uploadArtefactRetryMutex.RLock()
	defer fake.uploadArtefactRetryMutex.RUnlock()
	return len(fake.uploadArtefactRetryArgsForCall)
}

func (fake *FakeHttpClient) UploadArtefactRetryCalls(stub func(string, string, int) error) {
	fake.uploadArtefactRetryMutex.Lock()
	defer fake.uploadArtefactRetryMutex.Unlock()
	fake.UploadArtefactRetryStub = stub
}

func (fake *FakeHttpClient) UploadArtefactRetryArgsForCall(i int) (string, string, int) {
	fake.uploadArtefactRetryMutex.RLock()
	defer fake.uploadArtefactRetryMutex.RUnlock()
	argsForCall := fake.uploadArtefactRetryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHttpClient) UploadArtefactRetryReturns(result1 error) {
	fake.uploadArtefactRetryMutex.Lock()
	defer fake.uploadArtefactRetryMutex.Unlock()
	fake.UploadArtefactRetryStub = nil
	fake.uploadArtefactRetryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) UploadArtefactRetryReturnsOnCall(i int, result1 error) {
	fake.uploadArtefactRetryMutex.Lock()
	defer fake.uploadArtefactRetryMutex.Unlock()
	fake.UploadArtefactRetryStub = nil
	if fake.uploadArtefactRetryReturnsOnCall == nil {
		fake.uploadArtefactRetryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadArtefactRetryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) UploadFile(arg1 string, arg2 string) error {
	fake.uploadFileMutex.Lock()
	ret, specificReturn := fake.uploadFileReturnsOnCall[len(fake.uploadFileArgsForCall)]
	fake.uploadFileArgsForCall = append(fake.uploadFileArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UploadFile", []interface{}{arg1, arg2})
	fake.uploadFileMutex.Unlock()
	if fake.UploadFileStub != nil {
		return fake.UploadFileStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.uploadFileReturns
	return fakeReturns.result1
}

func (fake *FakeHttpClient) UploadFileCallCount() int {
	fake.uploadFileMutex.RLock()
	defer fake.uploadFileMutex.RUnlock()
	return len(fake.uploadFileArgsForCall)
}

func (fake *FakeHttpClient) UploadFileCalls(stub func(string, string) error) {
	fake.uploadFileMutex.Lock()
	defer fake.uploadFileMutex.Unlock()
	fake.UploadFileStub = stub
}

func (fake *FakeHttpClient) UploadFileArgsForCall(i int) (string, string) {
	fake.uploadFileMutex.RLock()
	defer fake.uploadFileMutex.RUnlock()
	argsForCall := fake.uploadFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) UploadFileReturns(result1 error) {
	fake.uploadFileMutex.Lock()
	defer fake.uploadFileMutex.Unlock()
	fake.UploadFileStub = nil
	fake.uploadFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) UploadFileReturnsOnCall(i int, result1 error) {
	fake.uploadFileMutex.Lock()
	defer fake.uploadFileMutex.Unlock()
	fake.UploadFileStub = nil
	if fake.uploadFileReturnsOnCall == nil {
		fake.uploadFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) UploadNamespaceFile(arg1 string, arg2 string, arg3 string) error {
	fake.uploadNamespaceFileMutex.Lock()
	ret, specificReturn := fake.uploadNamespaceFileReturnsOnCall[len(fake.uploadNamespaceFileArgsForCall)]
	fake.uploadNamespaceFileArgsForCall = append(fake.uploadNamespaceFileArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("UploadNamespaceFile", []interface{}{arg1, arg2, arg3})
	fake.uploadNamespaceFileMutex.Unlock()
	if fake.UploadNamespaceFileStub != nil {
		return fake.UploadNamespaceFileStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.uploadNamespaceFileReturns
	return fakeReturns.result1
}

func (fake *FakeHttpClient) UploadNamespaceFileCallCount() int {
	fake.uploadNamespaceFileMutex.RLock()
	defer fake.uploadNamespaceFileMutex.RUnlock()
	return len(fake.uploadNamespaceFileArgsForCall)
}

func (fake *FakeHttpClient) UploadNamespaceFileCalls(stub func(string, string, string) error) {
	fake.uploadNamespaceFileMutex.Lock()
	defer fake.uploadNamespaceFileMutex.Unlock()
	fake.UploadNamespaceFileStub = stub
}

func (fake *FakeHttpClient) UploadNamespaceFileArgsForCall(i int) (string, string, string) {
	fake.uploadNamespaceFileMutex.RLock()
	defer fake.uploadNamespaceFileMutex.RUnlock()
	argsForCall := fake.uploadNamespaceFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHttpClient) UploadNamespaceFileReturns(result1 error) {
	fake.uploadNamespaceFileMutex.Lock()
	defer fake.uploadNamespaceFileMutex.Unlock()
	fake.UploadNamespaceFileStub = nil
	fake.uploadNamespaceFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) UploadNamespaceFileReturnsOnCall(i int, result1 error) {
	fake.uploadNamespaceFileMutex.Lock()
	defer fake.uploadNamespaceFileMutex.Unlock()
	fake.UploadNamespaceFileStub = nil
	if fake.uploadNamespaceFileReturnsOnCall == nil {
		fake.uploadNamespaceFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadNamespaceFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) UploadStorageFile(arg1 string, arg2 string, arg3 string) error {
	fake.uploadStorageFileMutex.Lock()
	ret, specificReturn := fake.uploadStorageFileReturnsOnCall[len(fake.uploadStorageFileArgsForCall)]
	fake.uploadStorageFileArgsForCall = append(fake.uploadStorageFileArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("UploadStorageFile", []interface{}{arg1, arg2, arg3})
	fake.uploadStorageFileMutex.Unlock()
	if fake.UploadStorageFileStub != nil {
		return fake.UploadStorageFileStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.uploadStorageFileReturns
	return fakeReturns.result1
}

func (fake *FakeHttpClient) UploadStorageFileCallCount() int {
	fake.uploadStorageFileMutex.RLock()
	defer fake.uploadStorageFileMutex.RUnlock()
	return len(fake.uploadStorageFileArgsForCall)
}

func (fake *FakeHttpClient) UploadStorageFileCalls(stub func(string, string, string) error) {
	fake.uploadStorageFileMutex.Lock()
	defer fake.uploadStorageFileMutex.Unlock()
	fake.UploadStorageFileStub = stub
}

func (fake *FakeHttpClient) UploadStorageFileArgsForCall(i int) (string, string, string) {
	fake.uploadStorageFileMutex.RLock()
	defer fake.uploadStorageFileMutex.RUnlock()
	argsForCall := fake.uploadStorageFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHttpClient) UploadStorageFileReturns(result1 error) {
	fake.uploadStorageFileMutex.Lock()
	defer fake.uploadStorageFileMutex.Unlock()
	fake.UploadStorageFileStub = nil
	fake.uploadStorageFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) UploadStorageFileReturnsOnCall(i int, result1 error) {
	fake.uploadStorageFileMutex.Lock()
	defer fake.uploadStorageFileMutex.Unlock()
	fake.UploadStorageFileStub = nil
	if fake.uploadStorageFileReturnsOnCall == nil {
		fake.uploadStorageFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadStorageFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHttpClient) UserCreate(arg1 map[string]interface{}) (event.APIResponse, error) {
	fake.userCreateMutex.Lock()
	ret, specificReturn := fake.userCreateReturnsOnCall[len(fake.userCreateArgsForCall)]
	fake.userCreateArgsForCall = append(fake.userCreateArgsForCall, struct {
		arg1 map[string]interface{}
	}{arg1})
	fake.recordInvocation("UserCreate", []interface{}{arg1})
	fake.userCreateMutex.Unlock()
	if fake.UserCreateStub != nil {
		return fake.UserCreateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.userCreateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) UserCreateCallCount() int {
	fake.userCreateMutex.RLock()
	defer fake.userCreateMutex.RUnlock()
	return len(fake.userCreateArgsForCall)
}

func (fake *FakeHttpClient) UserCreateCalls(stub func(map[string]interface{}) (event.APIResponse, error)) {
	fake.userCreateMutex.Lock()
	defer fake.userCreateMutex.Unlock()
	fake.UserCreateStub = stub
}

func (fake *FakeHttpClient) UserCreateArgsForCall(i int) map[string]interface{} {
	fake.userCreateMutex.RLock()
	defer fake.userCreateMutex.RUnlock()
	argsForCall := fake.userCreateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) UserCreateReturns(result1 event.APIResponse, result2 error) {
	fake.userCreateMutex.Lock()
	defer fake.userCreateMutex.Unlock()
	fake.UserCreateStub = nil
	fake.userCreateReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) UserCreateReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.userCreateMutex.Lock()
	defer fake.userCreateMutex.Unlock()
	fake.UserCreateStub = nil
	if fake.userCreateReturnsOnCall == nil {
		fake.userCreateReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.userCreateReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) UserRemove(arg1 string) (event.APIResponse, error) {
	fake.userRemoveMutex.Lock()
	ret, specificReturn := fake.userRemoveReturnsOnCall[len(fake.userRemoveArgsForCall)]
	fake.userRemoveArgsForCall = append(fake.userRemoveArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("UserRemove", []interface{}{arg1})
	fake.userRemoveMutex.Unlock()
	if fake.UserRemoveStub != nil {
		return fake.UserRemoveStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.userRemoveReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) UserRemoveCallCount() int {
	fake.userRemoveMutex.RLock()
	defer fake.userRemoveMutex.RUnlock()
	return len(fake.userRemoveArgsForCall)
}

func (fake *FakeHttpClient) UserRemoveCalls(stub func(string) (event.APIResponse, error)) {
	fake.userRemoveMutex.Lock()
	defer fake.userRemoveMutex.Unlock()
	fake.UserRemoveStub = stub
}

func (fake *FakeHttpClient) UserRemoveArgsForCall(i int) string {
	fake.userRemoveMutex.RLock()
	defer fake.userRemoveMutex.RUnlock()
	argsForCall := fake.userRemoveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) UserRemoveReturns(result1 event.APIResponse, result2 error) {
	fake.userRemoveMutex.Lock()
	defer fake.userRemoveMutex.Unlock()
	fake.UserRemoveStub = nil
	fake.userRemoveReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) UserRemoveReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.userRemoveMutex.Lock()
	defer fake.userRemoveMutex.Unlock()
	fake.UserRemoveStub = nil
	if fake.userRemoveReturnsOnCall == nil {
		fake.userRemoveReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.userRemoveReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) UserSet(arg1 string, arg2 string) (event.APIResponse, error) {
	fake.userSetMutex.Lock()
	ret, specificReturn := fake.userSetReturnsOnCall[len(fake.userSetArgsForCall)]
	fake.userSetArgsForCall = append(fake.userSetArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UserSet", []interface{}{arg1, arg2})
	fake.userSetMutex.Unlock()
	if fake.UserSetStub != nil {
		return fake.UserSetStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.userSetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) UserSetCallCount() int {
	fake.userSetMutex.RLock()
	defer fake.userSetMutex.RUnlock()
	return len(fake.userSetArgsForCall)
}

func (fake *FakeHttpClient) UserSetCalls(stub func(string, string) (event.APIResponse, error)) {
	fake.userSetMutex.Lock()
	defer fake.userSetMutex.Unlock()
	fake.UserSetStub = stub
}

func (fake *FakeHttpClient) UserSetArgsForCall(i int) (string, string) {
	fake.userSetMutex.RLock()
	defer fake.userSetMutex.RUnlock()
	argsForCall := fake.userSetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) UserSetReturns(result1 event.APIResponse, result2 error) {
	fake.userSetMutex.Lock()
	defer fake.userSetMutex.Unlock()
	fake.UserSetStub = nil
	fake.userSetReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) UserSetReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.userSetMutex.Lock()
	defer fake.userSetMutex.Unlock()
	fake.UserSetStub = nil
	if fake.userSetReturnsOnCall == nil {
		fake.userSetReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.userSetReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) UserUnset(arg1 string, arg2 string) (event.APIResponse, error) {
	fake.userUnsetMutex.Lock()
	ret, specificReturn := fake.userUnsetReturnsOnCall[len(fake.userUnsetArgsForCall)]
	fake.userUnsetArgsForCall = append(fake.userUnsetArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UserUnset", []interface{}{arg1, arg2})
	fake.userUnsetMutex.Unlock()
	if fake.UserUnsetStub != nil {
		return fake.UserUnsetStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.userUnsetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) UserUnsetCallCount() int {
	fake.userUnsetMutex.RLock()
	defer fake.userUnsetMutex.RUnlock()
	return len(fake.userUnsetArgsForCall)
}

func (fake *FakeHttpClient) UserUnsetCalls(stub func(string, string) (event.APIResponse, error)) {
	fake.userUnsetMutex.Lock()
	defer fake.userUnsetMutex.Unlock()
	fake.UserUnsetStub = stub
}

func (fake *FakeHttpClient) UserUnsetArgsForCall(i int) (string, string) {
	fake.userUnsetMutex.RLock()
	defer fake.userUnsetMutex.RUnlock()
	argsForCall := fake.userUnsetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) UserUnsetReturns(result1 event.APIResponse, result2 error) {
	fake.userUnsetMutex.Lock()
	defer fake.userUnsetMutex.Unlock()
	fake.UserUnsetStub = nil
	fake.userUnsetReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) UserUnsetReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.userUnsetMutex.Lock()
	defer fake.userUnsetMutex.Unlock()
	fake.UserUnsetStub = nil
	if fake.userUnsetReturnsOnCall == nil {
		fake.userUnsetReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.userUnsetReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) UserUpdate(arg1 string, arg2 map[string]interface{}) (event.APIResponse, error) {
	fake.userUpdateMutex.Lock()
	ret, specificReturn := fake.userUpdateReturnsOnCall[len(fake.userUpdateArgsForCall)]
	fake.userUpdateArgsForCall = append(fake.userUpdateArgsForCall, struct {
		arg1 string
		arg2 map[string]interface{}
	}{arg1, arg2})
	fake.recordInvocation("UserUpdate", []interface{}{arg1, arg2})
	fake.userUpdateMutex.Unlock()
	if fake.UserUpdateStub != nil {
		return fake.UserUpdateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.userUpdateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) UserUpdateCallCount() int {
	fake.userUpdateMutex.RLock()
	defer fake.userUpdateMutex.RUnlock()
	return len(fake.userUpdateArgsForCall)
}

func (fake *FakeHttpClient) UserUpdateCalls(stub func(string, map[string]interface{}) (event.APIResponse, error)) {
	fake.userUpdateMutex.Lock()
	defer fake.userUpdateMutex.Unlock()
	fake.UserUpdateStub = stub
}

func (fake *FakeHttpClient) UserUpdateArgsForCall(i int) (string, map[string]interface{}) {
	fake.userUpdateMutex.RLock()
	defer fake.userUpdateMutex.RUnlock()
	argsForCall := fake.userUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) UserUpdateReturns(result1 event.APIResponse, result2 error) {
	fake.userUpdateMutex.Lock()
	defer fake.userUpdateMutex.Unlock()
	fake.UserUpdateStub = nil
	fake.userUpdateReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) UserUpdateReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.userUpdateMutex.Lock()
	defer fake.userUpdateMutex.Unlock()
	fake.UserUpdateStub = nil
	if fake.userUpdateReturnsOnCall == nil {
		fake.userUpdateReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.userUpdateReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) WebHookCreate(arg1 string) (event.APIResponse, error) {
	fake.webHookCreateMutex.Lock()
	ret, specificReturn := fake.webHookCreateReturnsOnCall[len(fake.webHookCreateArgsForCall)]
	fake.webHookCreateArgsForCall = append(fake.webHookCreateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("WebHookCreate", []interface{}{arg1})
	fake.webHookCreateMutex.Unlock()
	if fake.WebHookCreateStub != nil {
		return fake.WebHookCreateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.webHookCreateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) WebHookCreateCallCount() int {
	fake.webHookCreateMutex.RLock()
	defer fake.webHookCreateMutex.RUnlock()
	return len(fake.webHookCreateArgsForCall)
}

func (fake *FakeHttpClient) WebHookCreateCalls(stub func(string) (event.APIResponse, error)) {
	fake.webHookCreateMutex.Lock()
	defer fake.webHookCreateMutex.Unlock()
	fake.WebHookCreateStub = stub
}

func (fake *FakeHttpClient) WebHookCreateArgsForCall(i int) string {
	fake.webHookCreateMutex.RLock()
	defer fake.webHookCreateMutex.RUnlock()
	argsForCall := fake.webHookCreateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) WebHookCreateReturns(result1 event.APIResponse, result2 error) {
	fake.webHookCreateMutex.Lock()
	defer fake.webHookCreateMutex.Unlock()
	fake.WebHookCreateStub = nil
	fake.webHookCreateReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) WebHookCreateReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.webHookCreateMutex.Lock()
	defer fake.webHookCreateMutex.Unlock()
	fake.WebHookCreateStub = nil
	if fake.webHookCreateReturnsOnCall == nil {
		fake.webHookCreateReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.webHookCreateReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) WebHookDelete(arg1 string) (event.APIResponse, error) {
	fake.webHookDeleteMutex.Lock()
	ret, specificReturn := fake.webHookDeleteReturnsOnCall[len(fake.webHookDeleteArgsForCall)]
	fake.webHookDeleteArgsForCall = append(fake.webHookDeleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("WebHookDelete", []interface{}{arg1})
	fake.webHookDeleteMutex.Unlock()
	if fake.WebHookDeleteStub != nil {
		return fake.WebHookDeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.webHookDeleteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) WebHookDeleteCallCount() int {
	fake.webHookDeleteMutex.RLock()
	defer fake.webHookDeleteMutex.RUnlock()
	return len(fake.webHookDeleteArgsForCall)
}

func (fake *FakeHttpClient) WebHookDeleteCalls(stub func(string) (event.APIResponse, error)) {
	fake.webHookDeleteMutex.Lock()
	defer fake.webHookDeleteMutex.Unlock()
	fake.WebHookDeleteStub = stub
}

func (fake *FakeHttpClient) WebHookDeleteArgsForCall(i int) string {
	fake.webHookDeleteMutex.RLock()
	defer fake.webHookDeleteMutex.RUnlock()
	argsForCall := fake.webHookDeleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) WebHookDeleteReturns(result1 event.APIResponse, result2 error) {
	fake.webHookDeleteMutex.Lock()
	defer fake.webHookDeleteMutex.Unlock()
	fake.WebHookDeleteStub = nil
	fake.webHookDeleteReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) WebHookDeleteReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.webHookDeleteMutex.Lock()
	defer fake.webHookDeleteMutex.Unlock()
	fake.WebHookDeleteStub = nil
	if fake.webHookDeleteReturnsOnCall == nil {
		fake.webHookDeleteReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.webHookDeleteReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) WebHookDeletePipeline(arg1 string) (event.APIResponse, error) {
	fake.webHookDeletePipelineMutex.Lock()
	ret, specificReturn := fake.webHookDeletePipelineReturnsOnCall[len(fake.webHookDeletePipelineArgsForCall)]
	fake.webHookDeletePipelineArgsForCall = append(fake.webHookDeletePipelineArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("WebHookDeletePipeline", []interface{}{arg1})
	fake.webHookDeletePipelineMutex.Unlock()
	if fake.WebHookDeletePipelineStub != nil {
		return fake.WebHookDeletePipelineStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.webHookDeletePipelineReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) WebHookDeletePipelineCallCount() int {
	fake.webHookDeletePipelineMutex.RLock()
	defer fake.webHookDeletePipelineMutex.RUnlock()
	return len(fake.webHookDeletePipelineArgsForCall)
}

func (fake *FakeHttpClient) WebHookDeletePipelineCalls(stub func(string) (event.APIResponse, error)) {
	fake.webHookDeletePipelineMutex.Lock()
	defer fake.webHookDeletePipelineMutex.Unlock()
	fake.WebHookDeletePipelineStub = stub
}

func (fake *FakeHttpClient) WebHookDeletePipelineArgsForCall(i int) string {
	fake.webHookDeletePipelineMutex.RLock()
	defer fake.webHookDeletePipelineMutex.RUnlock()
	argsForCall := fake.webHookDeletePipelineArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) WebHookDeletePipelineReturns(result1 event.APIResponse, result2 error) {
	fake.webHookDeletePipelineMutex.Lock()
	defer fake.webHookDeletePipelineMutex.Unlock()
	fake.WebHookDeletePipelineStub = nil
	fake.webHookDeletePipelineReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) WebHookDeletePipelineReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.webHookDeletePipelineMutex.Lock()
	defer fake.webHookDeletePipelineMutex.Unlock()
	fake.WebHookDeletePipelineStub = nil
	if fake.webHookDeletePipelineReturnsOnCall == nil {
		fake.webHookDeletePipelineReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.webHookDeletePipelineReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) WebHookDeleteTask(arg1 string) (event.APIResponse, error) {
	fake.webHookDeleteTaskMutex.Lock()
	ret, specificReturn := fake.webHookDeleteTaskReturnsOnCall[len(fake.webHookDeleteTaskArgsForCall)]
	fake.webHookDeleteTaskArgsForCall = append(fake.webHookDeleteTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("WebHookDeleteTask", []interface{}{arg1})
	fake.webHookDeleteTaskMutex.Unlock()
	if fake.WebHookDeleteTaskStub != nil {
		return fake.WebHookDeleteTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.webHookDeleteTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) WebHookDeleteTaskCallCount() int {
	fake.webHookDeleteTaskMutex.RLock()
	defer fake.webHookDeleteTaskMutex.RUnlock()
	return len(fake.webHookDeleteTaskArgsForCall)
}

func (fake *FakeHttpClient) WebHookDeleteTaskCalls(stub func(string) (event.APIResponse, error)) {
	fake.webHookDeleteTaskMutex.Lock()
	defer fake.webHookDeleteTaskMutex.Unlock()
	fake.WebHookDeleteTaskStub = stub
}

func (fake *FakeHttpClient) WebHookDeleteTaskArgsForCall(i int) string {
	fake.webHookDeleteTaskMutex.RLock()
	defer fake.webHookDeleteTaskMutex.RUnlock()
	argsForCall := fake.webHookDeleteTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) WebHookDeleteTaskReturns(result1 event.APIResponse, result2 error) {
	fake.webHookDeleteTaskMutex.Lock()
	defer fake.webHookDeleteTaskMutex.Unlock()
	fake.WebHookDeleteTaskStub = nil
	fake.webHookDeleteTaskReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) WebHookDeleteTaskReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.webHookDeleteTaskMutex.Lock()
	defer fake.webHookDeleteTaskMutex.Unlock()
	fake.WebHookDeleteTaskStub = nil
	if fake.webHookDeleteTaskReturnsOnCall == nil {
		fake.webHookDeleteTaskReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.webHookDeleteTaskReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) WebHookEdit(arg1 map[string]interface{}) (event.APIResponse, error) {
	fake.webHookEditMutex.Lock()
	ret, specificReturn := fake.webHookEditReturnsOnCall[len(fake.webHookEditArgsForCall)]
	fake.webHookEditArgsForCall = append(fake.webHookEditArgsForCall, struct {
		arg1 map[string]interface{}
	}{arg1})
	fake.recordInvocation("WebHookEdit", []interface{}{arg1})
	fake.webHookEditMutex.Unlock()
	if fake.WebHookEditStub != nil {
		return fake.WebHookEditStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.webHookEditReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) WebHookEditCallCount() int {
	fake.webHookEditMutex.RLock()
	defer fake.webHookEditMutex.RUnlock()
	return len(fake.webHookEditArgsForCall)
}

func (fake *FakeHttpClient) WebHookEditCalls(stub func(map[string]interface{}) (event.APIResponse, error)) {
	fake.webHookEditMutex.Lock()
	defer fake.webHookEditMutex.Unlock()
	fake.WebHookEditStub = stub
}

func (fake *FakeHttpClient) WebHookEditArgsForCall(i int) map[string]interface{} {
	fake.webHookEditMutex.RLock()
	defer fake.webHookEditMutex.RUnlock()
	argsForCall := fake.webHookEditArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHttpClient) WebHookEditReturns(result1 event.APIResponse, result2 error) {
	fake.webHookEditMutex.Lock()
	defer fake.webHookEditMutex.Unlock()
	fake.WebHookEditStub = nil
	fake.webHookEditReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) WebHookEditReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.webHookEditMutex.Lock()
	defer fake.webHookEditMutex.Unlock()
	fake.WebHookEditStub = nil
	if fake.webHookEditReturnsOnCall == nil {
		fake.webHookEditReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.webHookEditReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) WebHookPipelineUpdate(arg1 string, arg2 map[string]interface{}) (event.APIResponse, error) {
	fake.webHookPipelineUpdateMutex.Lock()
	ret, specificReturn := fake.webHookPipelineUpdateReturnsOnCall[len(fake.webHookPipelineUpdateArgsForCall)]
	fake.webHookPipelineUpdateArgsForCall = append(fake.webHookPipelineUpdateArgsForCall, struct {
		arg1 string
		arg2 map[string]interface{}
	}{arg1, arg2})
	fake.recordInvocation("WebHookPipelineUpdate", []interface{}{arg1, arg2})
	fake.webHookPipelineUpdateMutex.Unlock()
	if fake.WebHookPipelineUpdateStub != nil {
		return fake.WebHookPipelineUpdateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.webHookPipelineUpdateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) WebHookPipelineUpdateCallCount() int {
	fake.webHookPipelineUpdateMutex.RLock()
	defer fake.webHookPipelineUpdateMutex.RUnlock()
	return len(fake.webHookPipelineUpdateArgsForCall)
}

func (fake *FakeHttpClient) WebHookPipelineUpdateCalls(stub func(string, map[string]interface{}) (event.APIResponse, error)) {
	fake.webHookPipelineUpdateMutex.Lock()
	defer fake.webHookPipelineUpdateMutex.Unlock()
	fake.WebHookPipelineUpdateStub = stub
}

func (fake *FakeHttpClient) WebHookPipelineUpdateArgsForCall(i int) (string, map[string]interface{}) {
	fake.webHookPipelineUpdateMutex.RLock()
	defer fake.webHookPipelineUpdateMutex.RUnlock()
	argsForCall := fake.webHookPipelineUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) WebHookPipelineUpdateReturns(result1 event.APIResponse, result2 error) {
	fake.webHookPipelineUpdateMutex.Lock()
	defer fake.webHookPipelineUpdateMutex.Unlock()
	fake.WebHookPipelineUpdateStub = nil
	fake.webHookPipelineUpdateReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) WebHookPipelineUpdateReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.webHookPipelineUpdateMutex.Lock()
	defer fake.webHookPipelineUpdateMutex.Unlock()
	fake.WebHookPipelineUpdateStub = nil
	if fake.webHookPipelineUpdateReturnsOnCall == nil {
		fake.webHookPipelineUpdateReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.webHookPipelineUpdateReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) WebHookTaskUpdate(arg1 string, arg2 map[string]interface{}) (event.APIResponse, error) {
	fake.webHookTaskUpdateMutex.Lock()
	ret, specificReturn := fake.webHookTaskUpdateReturnsOnCall[len(fake.webHookTaskUpdateArgsForCall)]
	fake.webHookTaskUpdateArgsForCall = append(fake.webHookTaskUpdateArgsForCall, struct {
		arg1 string
		arg2 map[string]interface{}
	}{arg1, arg2})
	fake.recordInvocation("WebHookTaskUpdate", []interface{}{arg1, arg2})
	fake.webHookTaskUpdateMutex.Unlock()
	if fake.WebHookTaskUpdateStub != nil {
		return fake.WebHookTaskUpdateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.webHookTaskUpdateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) WebHookTaskUpdateCallCount() int {
	fake.webHookTaskUpdateMutex.RLock()
	defer fake.webHookTaskUpdateMutex.RUnlock()
	return len(fake.webHookTaskUpdateArgsForCall)
}

func (fake *FakeHttpClient) WebHookTaskUpdateCalls(stub func(string, map[string]interface{}) (event.APIResponse, error)) {
	fake.webHookTaskUpdateMutex.Lock()
	defer fake.webHookTaskUpdateMutex.Unlock()
	fake.WebHookTaskUpdateStub = stub
}

func (fake *FakeHttpClient) WebHookTaskUpdateArgsForCall(i int) (string, map[string]interface{}) {
	fake.webHookTaskUpdateMutex.RLock()
	defer fake.webHookTaskUpdateMutex.RUnlock()
	argsForCall := fake.webHookTaskUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHttpClient) WebHookTaskUpdateReturns(result1 event.APIResponse, result2 error) {
	fake.webHookTaskUpdateMutex.Lock()
	defer fake.webHookTaskUpdateMutex.Unlock()
	fake.WebHookTaskUpdateStub = nil
	fake.webHookTaskUpdateReturns = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) WebHookTaskUpdateReturnsOnCall(i int, result1 event.APIResponse, result2 error) {
	fake.webHookTaskUpdateMutex.Lock()
	defer fake.webHookTaskUpdateMutex.Unlock()
	fake.WebHookTaskUpdateStub = nil
	if fake.webHookTaskUpdateReturnsOnCall == nil {
		fake.webHookTaskUpdateReturnsOnCall = make(map[int]struct {
			result1 event.APIResponse
			result2 error
		})
	}
	fake.webHookTaskUpdateReturnsOnCall[i] = struct {
		result1 event.APIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.abortTaskMutex.RLock()
	defer fake.abortTaskMutex.RUnlock()
	fake.allTasksMutex.RLock()
	defer fake.allTasksMutex.RUnlock()
	fake.appendTaskOutputMutex.RLock()
	defer fake.appendTaskOutputMutex.RUnlock()
	fake.cloneTaskMutex.RLock()
	defer fake.cloneTaskMutex.RUnlock()
	fake.createNodeMutex.RLock()
	defer fake.createNodeMutex.RUnlock()
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	fake.docMutex.RLock()
	defer fake.docMutex.RUnlock()
	fake.downloadMutex.RLock()
	defer fake.downloadMutex.RUnlock()
	fake.downloadArtefactsFromNamespaceMutex.RLock()
	defer fake.downloadArtefactsFromNamespaceMutex.RUnlock()
	fake.downloadArtefactsFromStorageMutex.RLock()
	defer fake.downloadArtefactsFromStorageMutex.RUnlock()
	fake.downloadArtefactsFromTaskMutex.RLock()
	defer fake.downloadArtefactsFromTaskMutex.RUnlock()
	fake.downloadArtefactsGenericMutex.RLock()
	defer fake.downloadArtefactsGenericMutex.RUnlock()
	fake.errorTaskMutex.RLock()
	defer fake.errorTaskMutex.RUnlock()
	fake.failTaskMutex.RLock()
	defer fake.failTaskMutex.RUnlock()
	fake.finishTaskMutex.RLock()
	defer fake.finishTaskMutex.RUnlock()
	fake.getBaseURLMutex.RLock()
	defer fake.getBaseURLMutex.RUnlock()
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	fake.handleAPIResponseMutex.RLock()
	defer fake.handleAPIResponseMutex.RUnlock()
	fake.handleRawMutex.RLock()
	defer fake.handleRawMutex.RUnlock()
	fake.handleUploadLargeFileMutex.RLock()
	defer fake.handleUploadLargeFileMutex.RUnlock()
	fake.namespaceAppendMutex.RLock()
	defer fake.namespaceAppendMutex.RUnlock()
	fake.namespaceCloneMutex.RLock()
	defer fake.namespaceCloneMutex.RUnlock()
	fake.namespaceCreateMutex.RLock()
	defer fake.namespaceCreateMutex.RUnlock()
	fake.namespaceDeleteMutex.RLock()
	defer fake.namespaceDeleteMutex.RUnlock()
	fake.namespaceFileListMutex.RLock()
	defer fake.namespaceFileListMutex.RUnlock()
	fake.namespaceRemovePathMutex.RLock()
	defer fake.namespaceRemovePathMutex.RUnlock()
	fake.namespaceTagMutex.RLock()
	defer fake.namespaceTagMutex.RUnlock()
	fake.nodesTaskMutex.RLock()
	defer fake.nodesTaskMutex.RUnlock()
	fake.pipelineCreateMutex.RLock()
	defer fake.pipelineCreateMutex.RUnlock()
	fake.pipelineDeleteMutex.RLock()
	defer fake.pipelineDeleteMutex.RUnlock()
	fake.planCreateMutex.RLock()
	defer fake.planCreateMutex.RUnlock()
	fake.planDeleteMutex.RLock()
	defer fake.planDeleteMutex.RUnlock()
	fake.registerNodeMutex.RLock()
	defer fake.registerNodeMutex.RUnlock()
	fake.removeNodeMutex.RLock()
	defer fake.removeNodeMutex.RUnlock()
	fake.runTaskMutex.RLock()
	defer fake.runTaskMutex.RUnlock()
	fake.secretCreateMutex.RLock()
	defer fake.secretCreateMutex.RUnlock()
	fake.secretDeleteMutex.RLock()
	defer fake.secretDeleteMutex.RUnlock()
	fake.secretEditMutex.RLock()
	defer fake.secretEditMutex.RUnlock()
	fake.setActiveReportMutex.RLock()
	defer fake.setActiveReportMutex.RUnlock()
	fake.setAgentMutex.RLock()
	defer fake.setAgentMutex.RUnlock()
	fake.setBaseURLMutex.RLock()
	defer fake.setBaseURLMutex.RUnlock()
	fake.setTaskFieldMutex.RLock()
	defer fake.setTaskFieldMutex.RUnlock()
	fake.setTaskOutputMutex.RLock()
	defer fake.setTaskOutputMutex.RUnlock()
	fake.setTaskResultMutex.RLock()
	defer fake.setTaskResultMutex.RUnlock()
	fake.setTaskStatusMutex.RLock()
	defer fake.setTaskStatusMutex.RUnlock()
	fake.setTokenMutex.RLock()
	defer fake.setTokenMutex.RUnlock()
	fake.setUploadChunkSizeMutex.RLock()
	defer fake.setUploadChunkSizeMutex.RUnlock()
	fake.settingCreateMutex.RLock()
	defer fake.settingCreateMutex.RUnlock()
	fake.settingRemoveMutex.RLock()
	defer fake.settingRemoveMutex.RUnlock()
	fake.settingUpdateMutex.RLock()
	defer fake.settingUpdateMutex.RUnlock()
	fake.setupTaskMutex.RLock()
	defer fake.setupTaskMutex.RUnlock()
	fake.startTaskMutex.RLock()
	defer fake.startTaskMutex.RUnlock()
	fake.stopTaskMutex.RLock()
	defer fake.stopTaskMutex.RUnlock()
	fake.storageCreateMutex.RLock()
	defer fake.storageCreateMutex.RUnlock()
	fake.storageDeleteMutex.RLock()
	defer fake.storageDeleteMutex.RUnlock()
	fake.storageFileListMutex.RLock()
	defer fake.storageFileListMutex.RUnlock()
	fake.storageRemovePathMutex.RLock()
	defer fake.storageRemovePathMutex.RUnlock()
	fake.streamOutputMutex.RLock()
	defer fake.streamOutputMutex.RUnlock()
	fake.successTaskMutex.RLock()
	defer fake.successTaskMutex.RUnlock()
	fake.taskDeleteMutex.RLock()
	defer fake.taskDeleteMutex.RUnlock()
	fake.taskFileListMutex.RLock()
	defer fake.taskFileListMutex.RUnlock()
	fake.taskLogMutex.RLock()
	defer fake.taskLogMutex.RUnlock()
	fake.taskLogArtefactMutex.RLock()
	defer fake.taskLogArtefactMutex.RUnlock()
	fake.taskStreamMutex.RLock()
	defer fake.taskStreamMutex.RUnlock()
	fake.tokenCreateMutex.RLock()
	defer fake.tokenCreateMutex.RUnlock()
	fake.tokenDeleteMutex.RLock()
	defer fake.tokenDeleteMutex.RUnlock()
	fake.uploadArtefactMutex.RLock()
	defer fake.uploadArtefactMutex.RUnlock()
	fake.uploadArtefactRetryMutex.RLock()
	defer fake.uploadArtefactRetryMutex.RUnlock()
	fake.uploadFileMutex.RLock()
	defer fake.uploadFileMutex.RUnlock()
	fake.uploadNamespaceFileMutex.RLock()
	defer fake.uploadNamespaceFileMutex.RUnlock()
	fake.uploadStorageFileMutex.RLock()
	defer fake.uploadStorageFileMutex.RUnlock()
	fake.userCreateMutex.RLock()
	defer fake.userCreateMutex.RUnlock()
	fake.userRemoveMutex.RLock()
	defer fake.userRemoveMutex.RUnlock()
	fake.userSetMutex.RLock()
	defer fake.userSetMutex.RUnlock()
	fake.userUnsetMutex.RLock()
	defer fake.userUnsetMutex.RUnlock()
	fake.userUpdateMutex.RLock()
	defer fake.userUpdateMutex.RUnlock()
	fake.webHookCreateMutex.RLock()
	defer fake.webHookCreateMutex.RUnlock()
	fake.webHookDeleteMutex.RLock()
	defer fake.webHookDeleteMutex.RUnlock()
	fake.webHookDeletePipelineMutex.RLock()
	defer fake.webHookDeletePipelineMutex.RUnlock()
	fake.webHookDeleteTaskMutex.RLock()
	defer fake.webHookDeleteTaskMutex.RUnlock()
	fake.webHookEditMutex.RLock()
	defer fake.webHookEditMutex.RUnlock()
	fake.webHookPipelineUpdateMutex.RLock()
	defer fake.webHookPipelineUpdateMutex.RUnlock()
	fake.webHookTaskUpdateMutex.RLock()
	defer fake.webHookTaskUpdateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHttpClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.HttpClient = new(FakeHttpClient)
