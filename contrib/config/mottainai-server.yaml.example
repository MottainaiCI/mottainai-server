# Mottainai Server Config

general:
  debug: false
  # Default
  logfile: '/var/log/mottainai/mottainai-server.log'
  # Values: info, warn, debug, error
  loglevel: 'info'

  # TLS options
  # tls_cert:
  # tls_key

  # Others logrus options / providers

#----------------------------------------------
# Web UI Configuration
#----------------------------------------------
web:
  # Define URL of the Web Application.
  # If Mottainai if under reverse proxy set this param
  # with relative path related with exposed path. Example: /mottainai
  url: '/'

  # Listening address
  listenaddress: '127.0.0.1'

  # Listening port where expose Mottainai WebUI
  port: '9090'

  # URL used for share API access address
  application_url: 'http://127.0.0.1:9090/'

  # Define Web Interface protocol.
  # Default is http. Values: http or https.
  # protocol: "http"

  # Define application name.
  # application_name: "Mottainai"

  # Override branding logo
  # application_branding_logo: "/path/to/your/logo"
  # application_branding_logo_small: "/path/to/your/logo_small"
  # application_branding_favicon: "/path/to/your/favicon.ico"

  # Web templates directory
  # template_dir: "./"

  # Root path ???
  root_path: './'

  # Define value for header Access-Control-Allow-Origin
  # access_control_allow_origin: '*'

  # Enable/Disable Embedded WebHook Server
  embed_webhookserver: True

  # Upload temporary directory where store uploading files
  # before move to right position.
  # upload_tmpdir: "/var/tmp"

  # Access Token
  # access_token: ''

  # WebHook Github Parameters
  # github_token: 'xxxx'
  # github_token_user: 'xxx'
  # github_secret: 'xxxx'
  # webhook_token: 'xxxxx'

  # Session store
  # If no option is provided, in-memory store is used by default i.e.
  # sessions are cleared on server restart
  # See https://go-macaron.com/middlewares/session for more information
  # Available options: redis
  # session_provider: redis
  # session_provider_config: addr=127.0.0.1:6379,prefix=mottainai:sessions:

broker:

  # Broker type
  type: 'amqp'

  # AMQP Broker for Result
  result_backend: 'amqp://guest:guest@127.0.0.1:5672/'
  # Address of Request Broker
  broker: 'amqp://guest:guest@127.0.0.1:5672/'
  default_queue: "standard"
  exchange: "jobs"
  # exchange_type: "direct"
  # binding_key: "machinery_task"

  # broker api management (if available)
  mgmt_uri: 'http://127.0.0.1:18080'
  user: 'guest'
  pass: 'guest'

  results_expire_in: 3600

  # Broker Redis options:

  # Maximum number of idle connections in the pool.
  # max_idle: 3

  # Maximum number of connections allocated by the pool at a given time.
  # When zero, there is no limit on the number of connections in the pool.
  # max_active: 10

  # Close connections after remaining idle for this duration in seconds. If the value
  # is zero, then idle connections are not closed. Applications should set
  # the timeout to a value less than the server's timeout.
  # idle_timeout: 240

  # read_timeout specifies the timeout in seconds for reading a single command reply.
  # read_timeout: 15

  # write_timeout specifies the timeout in seconds for writing a single command.
  # write_timeout: 15

  # It specifies the period in milliseconds when polling redis for delayed tasks
  # delayed_tasks_poll_period: 10000

  # connect_timeout specifies the timeout in seconds for connecting to the Redis server when
  # no DialNetDial option is specified.
  # connect_timeout: 15

  # If Wait is true and the pool is at the MaxActive limit, then Get() waits
  # for a connection to be returned to the pool before returning.
  # wait: false

db:
  engine: 'tiedot'

  # Configuration params for tiedot adapter
  db_path: '/srv/mottainai/web/db'

storage:
  # Define type of storage for users data
  type: 'dir'

  # Artefacts paths
  artefact_path: '/srv/mottainai/web/artefact'
  # Namespaces path
  namespace_path: '/srv/mottainai/web/namespaces'
  # Storages path
  storage_path: '/srv/mottainai/web/storage'

# Mottainai agent options
agent:

  # Agent key
  #agent_key: "xxxxxxx"
  # API Key
  #api_key: "xxxxxx"

  # Standalone mode. Agent task only specific task
  # standalone: False

  # Directory where store building data
  build_path: "/build"

  concurrency: 1
  # Secret Key of the Agent
  #secret_key: "xxxxxxxx"
  #executor: 'docker|lxd|qemu'

  # Define Size of private queue
  # private_queue: 1

  # Define download speed limit. 0 means no limit
  # download_speed_limit: 0
  # Define upload speed limit. 0 means no limit
  # upload_speed_limit: 0

  # Define Queues handled by Agent and number of concurrency tasks
  # queues:
  #  iso: 2

  # Cache Registry options where push docker containers images.
  # cache_registry:
  #    type: "docker"
  #    username: "xxxxxx"
  #    password: "yyyyyyyyy"
  #    entity: "zzzzz"
  #    serveraddress: "https://index.docker.io/v1"

  # Define operations executed by Agent Healtcheck
  health_check_exec:
     - docker system prune --force --all --volumes
  # health_check_clean_path:

  # Define a list of operations executed before any task.
  # pre_task_hook_exec:
  #   - script1

  # ----------------------------------
  # Docker executor options
  # ----------------------------------
  # Define Docker CAPS
  docker_caps:
    - 'SYS_PTRACE'

  # Define List of CAPS to drop
  # docker_caps_drop:
  #   - 'SYS_PTRACE'

  # Docker endpoint
  docker_endpoint: "unix:///var/run/docker.sock"

  docker_keepimg: True
  # Enable docker privileged container
  # docker_privileged: False

  # Enable DID (Docker in Docker)
  # docker_in_docker: False

  # Define DID mountpoint
  # docker_in_docker_endpoint: /var/run/docker.sock

  # ----------------------------------
  # ----------------------------------
  # LXD executor options
  # ----------------------------------

  # In the normaly mode this field is not needed
  # because by default lxd client library try to search
  # for $LXD_SOCKET, if unset try to use $LXD_DIR/unix.socket and
  # then to /var/lib/lxd/unix.socket.
  # If not present and on remotes is set a default agent
  # try to use it.
  # lxd_endpoint: ""

  # List of remotes to use are stored on file config.yml
  # under directory $HOME/.config/lxc/ with certificate to use and
  # servercerts directory. We use as default path:
  # build_path + "lxc"
  # that could be verifies with this command:
  # LXD_CONF=/srv/mottainai/lxc lxc remote list
  #
  # For use a different path for LXD configuration file
  # set this param. Default is: /srv/mottainai/lxc
  # lxd_config_dir: ""

  # Maintains container on server after task is ended
  # lxd_ephemeral_containers: True

  # Define profiles to use
  lxd_profiles:
    - 'default'


  # Cache Registry options for LXD images.
  # For LXD there are two different ways to manage
  # cache registry:
  #   * p2p: in this case image downloaded between all
  #          cluster nodes. Agent search for image with right
  #          aliases from all configured remotes.
  #          In this case image created by container it isn't
  #          pushed to a specific remote and so, this could
  #          be better for reduce bandwidth or speedup cache image
  #          creation.
  #   * server: in this case a specific remote is used
  #             for register images created by containers
  #
  #
  # lxd_cache_registry:
  #    Define type of lxd_cache_registry:
  #    type: "p2p" or "server"
  #
  #    This field it is used only if type is equal to server and
  #    contains name of the remote server to use (with protocol LXD)
  #    and defined on config.yml file.
  #    remote: "cache_registry_server_name"
  #
  #
  #    Define binary tool used by LXD for create image from container.
  #    Instead of use xz could be better pxz that use multiple cores for compression.
  #    compression_algorithm: "none"
  #
  #    Define number of seconds before wait for LXD operations.
  #    Workaround used on ARM devices. Default is 1.
  #    wait_sleep: "5"
  # ----------------------------------
